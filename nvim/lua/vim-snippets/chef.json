{
  "cookbook_file": {
    "prefix": "cookbook_file",
    "body": [
      "# Cookbook File resource",
      "cookbook_file ${1:\"/path/to/file\"} do # The remote path where the file will reside",
      "\t${2:#}backup $3 # How many backups of this file to keep. Set to false  if you want no backups",
      "\t${4:#}group $5 # The group owner of the file (string or id)",
      "\t${6:#}mode $7 # The octal mode of the file - e.g. 0755",
      "\t${8:#}owner $9 # The owner for the file",
      "\t${10:#}source $11 # The basename of the source file",
      "\t${12:#}cookbook $13 # The cookbook this file is stored in",
      "",
      "\t${14:#}${15: action :create} # Create this file (Default)",
      "\t${16:#}${17: action :create_if_missing} # Create only if it doesn't exist yet",
      "\t${18:#}${0: action :delete} # Delete this file",
      "end",
      ""
    ]
  },
  "execute": {
    "prefix": "execute",
    "body": [
      "# Execute resource",
      "execute ${1:\"command to execute\"} do # The command to execute",
      "\t${2:#}creates ${3:nil} # A file this command creates - if the file exists, the command will not be run.",
      "\t${4:#}cwd ${5:nil} # Current working directory to run the command from.",
      "\t${6:#}environment ${7:nil} # A hash of environment variables to set before running this command.",
      "\t${8:#}group ${9:nil} # A group name or group ID that we should change to before running this command.",
      "\t${10:#}path ${11:nil} # An array of paths to use when searching for the command. Nil uses system path.",
      "\t${12:#}returns ${13:0} # The return value of the command - this resource raises an exception if the return value does not match.",
      "\t${14:#}timeout ${15:nil} # How many seconds to let the command run before timing it out.",
      "\t${16:#}user ${17:nil} # A user name or user ID that we should change to before running this command.",
      "\t${18:#}umask ${19:nil} # Umask for files created by the command",
      "",
      "\t${20:#}${21:action :run} # Run this command (Default)",
      "\t${22:#}${0:action :nothing} # Do not run this command",
      "end",
      ""
    ]
  },
  "link": {
    "prefix": "link",
    "body": [
      "# Link resource",
      "link ${1:\"/target/file\"} do # The file name of the link",
      "\t${2:#}to $3 # The real file you want to link to",
      "\t${4:#}link_type ${5:symbolic} # Either :symbolic or :hard",
      "\t${6:#}owner $7 # The owner of the symlink",
      "\t${8:#}group $9 # The group of the symlink",
      "",
      "\t${10:#}${11:action :create} # Create a link (Default)",
      "\t${12:#}${0:action :delete} # Delete a link",
      "end",
      ""
    ]
  },
  "package": {
    "prefix": "package",
    "body": [
      "# Package resource",
      "package ${1:\"package_name\"} do # Name of the package to install",
      "\t${2:#}version ${3:nil} # The version of the package to install/upgrade",
      "\t${4:#}response_file ${5:nil} # An optional response file - used to pre-seed packages (note: the file is fetched by Remote File)",
      "\t${6:#}source $7 # Used to provide an optional package source for providers that use a local file (rubygems, dpkg and rpm)",
      "\t${8:#}options ${9:nil} # Add additional options to the underlying package command",
      "\t${10:#}gem_binary ${11:gem} # A gem_package attribut to specify a gem binary. Useful for installing ruby 1.9 gems while running chef in ruby 1.8",
      "",
      "\t${12:#}${13:action :install} # Install a package - if version is provided, install that specific version (Default)",
      "\t${14:#}${15:action :upgrade} # Upgrade a package - if version is provided, upgrade to that specific version",
      "\t${16:#}${17:action :remove} # Remove a package",
      "\t${18:#}${0:action :purge} # Purge a package (this usually entails removing configuration files as well as the package itself)",
      "end",
      ""
    ]
  },
  "service": {
    "prefix": "service",
    "body": [
      "# Service resource",
      "service ${1:\"service_name\"} do # Name of the service",
      "\t${2:#}enabled ${3:nil} # Whether the service is enabled at boot time",
      "\t${4:#}running ${5:nil} # Make sure the service is running. Start if stopped",
      "\t${6:#}pattern $7 # Pattern to look for in the process table",
      "\t${8:#}start_command ${9:nil} # Command used to start this service",
      "\t${10:#}stop_command ${11:nil} # Command used to stop this service",
      "\t${12:#}status_command ${13:nil} # Command used to check the service run status",
      "\t${14:#}restart_command ${15:nil} # Command used to restart this service",
      "\t${16:#}reload_command ${17:nil} # Command used to tell this service to reload its configuration",
      "\t${18:#}supports ${19:false} # Features this service supports, ie :restart, :reload, :status",
      "",
      "\t${20:#}${21:action :enable} # Enable this service",
      "\t${22:#}${23:action :disable} # Disable this service",
      "\t${24:#}${25:action :nothing} # Don't do anything with this service (Default)",
      "\t${26:#}${27:action :start} # Start this service",
      "\t${28:#}${29:action :stop} # Stop this service",
      "\t${30:#}${31:action :restart} # Restart this service",
      "\t${32:#}${0:action :reload} # Reload the configuration for this service",
      "end",
      ""
    ]
  },
  "file": {
    "prefix": "file",
    "body": [
      "# File resource",
      "file ${1:\"/path/to/file\"} do # Path to the file",
      "\t${2:#}backup ${3:5} # How many backups of this file to keep. Set to false if you want no backups.",
      "\t${4:#}owner $5 # The owner for the file",
      "\t${6:#}group $7 # The group owner of the file (string or id)",
      "\t${8:#}mode $9 # The octal mode of the file (4-digit format)",
      "\t${10:#}content ${11:nil} # A string to write to the file. This will replace any previous content if set",
      "",
      "\t${12:#}${13:action :create} # Create this file (Default)",
      "\t${14:#}${15:action :delete} # Delete this file",
      "\t${16:#}${0:action :touch} # Touch this file (update the mtime/atime)",
      "end",
      ""
    ]
  },
  "directory": {
    "prefix": "directory",
    "body": [
      "# Directory resource",
      "directory ${1:\"/path/to/dir\"} do # The path to the directory",
      "\t${2:#}group $3 # The group owner of the directory (string or id)",
      "\t${4:#}mode $5 # The octal mode of the directory, eg 0755",
      "\t${6:#}owner $7 # The owner for the directory",
      "\t${10:#}recursive ${11:false} # When deleting the directory, delete it recursively. When creating the directory, create recursively (ie, mkdir -p)",
      "",
      "\t${12:#}${13:action :create} # Create this directory (Default)",
      "\t${14:#}${0:action :delete} # Delete this directory",
      "end",
      ""
    ]
  },
  "template": {
    "prefix": "template",
    "body": [
      "# Template resource",
      "template ${1:\"/path/to/file\"} do # Path to the file",
      "\t${2:#}cookbook ${3:nil} # Specify the cookbook where the template is located, default is current cookbook",
      "\t${4:#}source ${5:nil} # Template source file. Found in templates/default for the cookbook",
      "\t${6:#}variables $7 # Variables to use in the template",
      "\t${8:#}local ${9:false} # Is the template already present on the node?",
      "\t${10:#}backup ${11:5} # How many backups of this file to keep. Set to false if you want no backups.",
      "\t${12:#}owner $13 # The owner for the file",
      "\t${14:#}group $15 # The group owner of the file (string or id)",
      "\t${16:#}mode $17 # The octal mode of the file (4-digit format)",
      "\t${18:#}content ${19:nil} # A string to write to the file. This will replace any previous content if set",
      "",
      "\t${20:#}${21:action :create} # Create the file (Default)",
      "\t${22:#}${23:action :delete} # Delete this file",
      "\t${24:#}${0:action :touch} # Touch this file (update the mtime/atime)",
      "end",
      ""
    ]
  },
  "svn": {
    "prefix": "svn",
    "body": [
      "# SCM Resource, Chef::Provider::Subversion",
      "svn ${1:\"/destination/path\"} do # Path to clone/checkout/export the source to",
      "\t${2:#}repository $3 # URI of the repository",
      "\t${4:#}revision ${5:\"HEAD\"} # revision to checkout. can be symbolic, like \"HEAD\" or an SCM specific revision id",
      "\t${6:#}reference $7 # (Git only) alias for revision",
      "\t${8:#}user ${9:nil} # System user to own the checked out code",
      "\t${10:#}group ${11:nil} # System group to own the checked out code",
      "\t${12:#}svn_username $13 # (Subversion only) Username for Subversion operations",
      "\t${14:#}svn_password $15 # (Subversion only) Password for Subversion operations",
      "\t${16:#}svn_arguments $17 # (Subversion only) Extra arguments passed to the subversion command",
      "",
      "\t${18:#}${19:action :sync} # Update the source to the specified revision, or get a new checkout (Default)",
      "\t${20:#}${21:action :checkout} # Checkout the source. Does nothing if a checkout is available",
      "\t${22:#}${0:action :export} # Export the source, excluding or removing any version control artifacts",
      "end",
      ""
    ]
  },
  "git": {
    "prefix": "git",
    "body": [
      "# SCM Resource, Chef::Provider::Git",
      "git ${1:\"/destination/path\"} do # Path to clone/checkout/export the source to",
      "\t${2:#}repository $3 # URI of the repository",
      "\t${4:#}revision ${5:\"HEAD\"} # revision to checkout. can be symbolic, like \"HEAD\" or an SCM specific revision id",
      "\t${6:#}reference $7 # (Git only) alias for revision",
      "\t${8:#}user ${9:nil} # System user to own the checked out code",
      "\t${10:#}group ${11:nil} # System group to own the checked out code",
      "\t${12:#}depth ${13:nil} # (Git only) Number of past revisions to include in Git shallow clone",
      "\t${14:#}enable_submodules ${15:\"false\"} # (Git only) performs a submodule init and submodule update",
      "\t${16:#}remote ${17:\"origin\"} # (Git only) remote repository to use for syncing an existing clone",
      "\t${18:#}ssh_wrapper $19 # (Git only) path to a wrapper script for running SSH with git. GIT_SSH environment variable is set to this.",
      "",
      "\t${20:#}${21:action :sync} # Update the source to the specified revision, or get a new clone (Default)",
      "\t${22:#}${23:action :checkout} # Clone the source. Does nothing if a checkout is available",
      "\t${24:#}${0:action :export} # Export the source, excluding or removing any version control artifacts",
      "end",
      ""
    ]
  },
  "deploy": {
    "prefix": "deploy",
    "body": [
      "# Deploy resource",
      "deploy ${1:\"/deploy/dir/\"} do # Path to deploy to",
      "\t${2:#}deploy_to $3 # The \"meta root\" for your application.",
      "\t${4:#}repository $5 # URI of the repository",
      "\t${6:#}repo $7 # alias for repository",
      "\t${8:#}revision ${9:\"HEAD\"} # revision to checkout. can be symbolic, like \"HEAD\" or an SCM specific revision id",
      "\t${10:#}branch $11 # alias for revision",
      "\t${12:#}user ${13:nil} # System user to run the deploy as",
      "\t${14:#}group ${15:nil} # System group to run the deploy as",
      "\t${16:#}svn_username $17 # (Subversion only) Username for Subversion operations\\}",
      "\t${18:#}svn_password $19 # (Subversion only) Password for Subversion operations\\}",
      "\t${20:#}svn_arguments $21 # (Subversion only) Extra arguments passed to the subversion command\\}",
      "\t${22:#}shallow_clone ${23:nil} # (Git only) boolean, true sets clone depth to 5",
      "\t${24:#}enable_submodules ${25:false} # (Git only) performs a submodule init and submodule update",
      "\t${26:#}remote ${27:\"origin\"} # (Git only) remote repository to use for syncing an existing clone",
      "\t${28:#}ssh_wrapper $29 # (Git only) path to a wrapper script for running SSH with git. GIT_SSH environment variable is set to this.",
      "\t${30:#}git_ssh_wrapper $31 # alias for ssh_wrapper",
      "\t${32:#}scm_provider ${33:Chef::Provider::Git} # SCM Provider to use.",
      "\t${34:#}repository_cache ${35: \"cached-copy\"} # Name of the subdirectory where the pristine copy of your app's source is kept",
      "\t${36:#}environment $37 # A hash of the form {\"ENV_VARIABLE\"=>\"VALUE\"\\}\\}",
      "\t${38:#}purge_before_symlink ${39:%w(log tmp/pids public/system)} # An array of paths, relative to app root, to be removed from a checkout before symlinking",
      "\t${40:#}create_dirs_before_symlink ${41:%w(tmp public config)} # Directories to create before symlinking. Runs after purge_before_symlink",
      "\t${42:#}symlinks ${43:\"system\" => \"public/system\", \"pids\" => \"tmp/pids\", \"log\" => \"log\"} # A hash that maps files in the shared directory to their paths in the current release",
      "\t${44:#}symlink_before_migrate ${45:\"config/database.yml\" => \"config/database.yml\"} # A hash that maps files in the shared directory into the current release. Runs before migration",
      "\t${46:#}migrate ${47:false} # Should the migration command be executed? (true or false)",
      "\t${48:#}migration_command $49 # A string containing a shell command to execute to run the migration",
      "\t${50:#}restart_command ${51:nil} # A code block to evaluate or a string containing a shell command",
      "\t${52:#}before_migrate ${53:\"deploy/before_migrate.rb\"} # A block or path to a file containing chef code to run before migrating",
      "\t${54:#}before_symlink ${55:\"deploy/before_symlink.rb\"} # A block or path to a file containing chef code to run before symlinking",
      "\t${56:#}before_restart ${57:\"deploy/before_restart.rb\"} # A block or path to a file containing chef code to run before restarting",
      "\t${58:#}after_restart ${59:\"deploy/after_restart.rb\"} # A block or path to a file containing chef code to run after restarting",
      "",
      "\t${60:#}${61::deploy} # Deploy the application (Default)",
      "\t${62:#}${63::force_deploy} # For the revision deploy strategy, this removes any existing release of the same code version and re-deploys in its place",
      "\t${64:#}${0::rollback} # Rollback the application to the previous release",
      "end"
    ]
  }
}
