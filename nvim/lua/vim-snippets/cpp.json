{
  "mainn": {
    "prefix": "mainn",
    "body": [
      "int main()",
      "{",
      "\t$0",
      "\treturn 0;",
      "\\}"
    ]
  },
  "incc": {
    "prefix": "incc",
    "body": "#include <${1:iostream}>"
  },
  "binc": {
    "prefix": "binc",
    "body": "#include <boost/${1:shared_ptr}.hpp>"
  },
  "array": {
    "prefix": "array",
    "body": "std::array<${1:T}, ${2:N}> $3;"
  },
  "vector": {
    "prefix": "vector",
    "body": "std::vector<${1:T}> $2;"
  },
  "deque": {
    "prefix": "deque",
    "body": "std::deque<${1:T}> $2;"
  },
  "flist": {
    "prefix": "flist",
    "body": "std::forward_list<${1:T}> $2;"
  },
  "list": {
    "prefix": "list",
    "body": "std::list<${1:T}> $2;"
  },
  "set": {
    "prefix": "set",
    "body": "std::set<${1:T}> $2;"
  },
  "map": {
    "prefix": "map",
    "body": "std::map<${1:Key}, ${2:T}> $3;"
  },
  "mset": {
    "prefix": "mset",
    "body": "std::multiset<${1:T}> $2;"
  },
  "mmap": {
    "prefix": "mmap",
    "body": "std::multimap<${1:Key}, ${2:T}> $3;"
  },
  "uset": {
    "prefix": "uset",
    "body": "std::unordered_set<${1:T}> $2;"
  },
  "umap": {
    "prefix": "umap",
    "body": "std::unordered_map<${1:Key}, ${2:T}> $3;"
  },
  "umset": {
    "prefix": "umset",
    "body": "std::unordered_multiset<${1:T}> $2;"
  },
  "ummap": {
    "prefix": "ummap",
    "body": "std::unordered_multimap<${1:Key}, ${2:T}> $3;"
  },
  "stack": {
    "prefix": "stack",
    "body": "std::stack<${1:T}> $2;"
  },
  "queue": {
    "prefix": "queue",
    "body": "std::queue<${1:T}> $2;"
  },
  "pqueue": {
    "prefix": "pqueue",
    "body": "std::priority_queue<${1:T}> $2;"
  },
  "msp": {
    "prefix": "msp",
    "body": "std::shared_ptr<${1:T}> $2 = std::make_shared<$1>($3);"
  },
  "amsp": {
    "prefix": "amsp",
    "body": "auto $1 = std::make_shared<${2:T}>($3);"
  },
  "mup": {
    "prefix": "mup",
    "body": "std::unique_ptr<${1:T}> $2 = std::make_unique<$1>($3);"
  },
  "amup": {
    "prefix": "amup",
    "body": "auto $1 = std::make_unique<${2:T}>($3);"
  },
  "pri": {
    "prefix": "pri",
    "body": "private"
  },
  "pro": {
    "prefix": "pro",
    "body": "protected"
  },
  "pub": {
    "prefix": "pub",
    "body": "public"
  },
  "fr": {
    "prefix": "fr",
    "body": "friend"
  },
  "mu": {
    "prefix": "mu",
    "body": "mutable"
  },
  "ans": {
    "prefix": "ans",
    "body": [
      "namespace {",
      "\t$0",
      "\\}"
    ]
  },
  "cout": {
    "prefix": "cout",
    "body": "std::cout << $1 << std::endl;"
  },
  "cin": {
    "prefix": "cin",
    "body": "std::cin >> $1;"
  },
  "sca": {
    "prefix": "sca",
    "body": "static_cast<${1:unsigned}>(${2:expr})$3"
  },
  "dca": {
    "prefix": "dca",
    "body": "dynamic_cast<${1:unsigned}>(${2:expr})$3"
  },
  "rca": {
    "prefix": "rca",
    "body": "reinterpret_cast<${1:unsigned}>(${2:expr})$3"
  },
  "cca": {
    "prefix": "cca",
    "body": "const_cast<${1:unsigned}>(${2:expr})$3"
  },
  "fori": {
    "prefix": "fori",
    "body": [
      "for (int ${2:i} = 0; $2 < ${1:count}; $2${3:++}) {",
      "\t$4",
      "\\}",
      ""
    ]
  },
  "fore": {
    "prefix": "fore",
    "body": [
      "for (${1:auto} ${2:i} : ${3:container}) {",
      "\t$4",
      "\\}"
    ]
  },
  "iter": {
    "prefix": "iter",
    "body": [
      "for (${1:std::vector}<${2:type}>::${3:const_iterator} ${4:i} = ${5:container}.begin(); $4 != $5.end(); ++$4) {",
      "\t$6",
      "\\}",
      ""
    ]
  },
  "itera": {
    "prefix": "itera",
    "body": [
      "for (auto ${1:i} = ${2:container}.begin(); $1 != $2.end(); ++$1) {",
      "\t${3:std::cout << *$1 << std::endl;}",
      "\\}"
    ]
  },
  "ld": {
    "prefix": "ld",
    "body": "[$1]($2){$3\\};"
  },
  "lld": {
    "prefix": "lld",
    "body": [
      "[$1]($2){",
      "\t$3",
      "\\};"
    ]
  },
  "try": {
    "prefix": "try",
    "body": [
      "try {",
      "",
      "\\}catch($1) {",
      "",
      "\\}"
    ]
  },
  "af": {
    "prefix": "af",
    "description": "auto function",
    "body": [
      "auto ${1:name}($2) -> ${3:void}",
      "{",
      "\t$0",
      "\\};"
    ]
  },
  "transform": {
    "prefix": "transform",
    "description": "\"ranges::views::transform\"",
    "body": "${1:${2:std::}${3:ranges::}views::}transform($4)"
  },
  "filter": {
    "prefix": "filter",
    "description": "\"ranges::views::filter\"",
    "body": "${1:${2:std::}${3:ranges::}views::}filter($4)"
  },
  "r": {
    "prefix": "r",
    "description": "\"ranges::\"",
    "body": "ranges::"
  },
  "rv": {
    "prefix": "rv",
    "description": "\"ranges::views::\"",
    "body": "ranges::views::"
  },
  "ra": {
    "prefix": "ra",
    "description": "\"ranges::actions::\"",
    "body": "ranges::actions::"
  },
  "sr": {
    "prefix": "sr",
    "description": "\"std::ranges::\"",
    "body": "std::ranges::"
  },
  "sv": {
    "prefix": "sv",
    "description": "\"std::views::\"",
    "body": "std::views::"
  },
  "gtemain": {
    "prefix": "gtemain",
    "description": "\"GTest:add main\"",
    "body": [
      "int main(int argc, char **argv) {",
      "\ttesting::InitGoogleTest(&argc, argv);",
      "\treturn RUN_ALL_TESTS();",
      "\\}"
    ]
  },
  "gtetest": {
    "prefix": "gtetest",
    "description": "\"GTest:add test\"",
    "body": [
      "TEST(${1:SuiteName}, ${2:TestName}) {",
      "\t$0",
      "\\}"
    ]
  },
  "gtefix": {
    "prefix": "gtefix",
    "description": "\"GTest:add fixture\"",
    "body": [
      "TEST_F(${1:SuiteName}, ${2:TestName}) {",
      "\t$0",
      "\\}"
    ]
  },
  "gtepar": {
    "prefix": "gtepar",
    "description": "\"GTest:add parameterized test\"",
    "body": [
      "TEST_P(${1:SuiteName}, ${2:TestName}) {",
      "\t$0",
      "\\}"
    ]
  },
  "gteparins": {
    "prefix": "gteparins",
    "description": "\"GTest:instantiate parameterized test\"",
    "body": "INSTANTIATE_TEST_SUITE_P(${1:InstantiationName}, ${2:SuiteName}, $0);"
  }
}
