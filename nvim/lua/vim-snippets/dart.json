{
  "af": {
    "prefix": "af",
    "body": "($1) {$2\\}$0"
  },
  "pr": {
    "prefix": "pr",
    "body": "print($1);"
  },
  "deb": {
    "prefix": "deb",
    "body": [
      "debugger();",
      "$0"
    ]
  },
  "lib": {
    "prefix": "lib",
    "body": [
      "library $1;",
      "$0"
    ]
  },
  "im": {
    "prefix": "im",
    "body": [
      "import 'package:$1/$2.dart';",
      "$0"
    ]
  },
  "rgx": {
    "prefix": "rgx",
    "body": "new RegExp(r'$1')"
  },
  "var": {
    "prefix": "var",
    "body": "var $1 = $2;"
  },
  "main": {
    "prefix": "main",
    "body": [
      "main() {",
      "  $0",
      "\\}"
    ]
  },
  "st": {
    "prefix": "st",
    "body": "static $0"
  },
  "fi": {
    "prefix": "fi",
    "body": "final $0"
  },
  "re": {
    "prefix": "re",
    "body": "return $0"
  },
  "br": {
    "prefix": "br",
    "body": "break;"
  },
  "th": {
    "prefix": "th",
    "body": "throw $0"
  },
  "imp": {
    "prefix": "imp",
    "body": "implements $0"
  },
  "ext": {
    "prefix": "ext",
    "body": "extends $0"
  },
  "if": {
    "prefix": "if",
    "body": [
      "if (${1:true}) {",
      "  $0",
      "\\}"
    ]
  },
  "ife": {
    "prefix": "ife",
    "body": [
      "if (${1:true}) {",
      "  $2",
      "\\} else {",
      "  $0",
      "\\}"
    ]
  },
  "el": {
    "prefix": "el",
    "body": "else"
  },
  "sw": {
    "prefix": "sw",
    "body": [
      "switch ($1) {",
      "  $0",
      "\\}"
    ]
  },
  "cs": {
    "prefix": "cs",
    "body": [
      "case $1:",
      "  $0"
    ]
  },
  "de": {
    "prefix": "de",
    "body": [
      "default:",
      "  $0"
    ]
  },
  "for": {
    "prefix": "for",
    "body": [
      "for (var ${2:i} = 0, len = ${1:things}.length; $2 < len; ${3:++}$2) {",
      "  ${0:$1[$2]}",
      "\\}"
    ]
  },
  "fore": {
    "prefix": "fore",
    "body": [
      "for (final ${2:item} in ${1:itemList}) {",
      "  $0",
      "\\}"
    ]
  },
  "wh": {
    "prefix": "wh",
    "body": [
      "while ($1) {",
      "  $0",
      "\\}"
    ]
  },
  "dowh": {
    "prefix": "dowh",
    "body": [
      "do {",
      "  $0",
      "\\} while ($0);"
    ]
  },
  "as": {
    "prefix": "as",
    "body": "assert($0);"
  },
  "try": {
    "prefix": "try",
    "body": [
      "try {",
      "  ${0:$TM_SELECTED_TEXT}",
      "\\} catch (${1:Exception e}) {",
      "\\}"
    ]
  },
  "tryf": {
    "prefix": "tryf",
    "body": [
      "try {",
      "  ${0:$TM_SELECTED_TEXT}",
      "\\} catch (${1:Exception e}) {",
      "\\} finally {",
      "\\}"
    ]
  }
}
