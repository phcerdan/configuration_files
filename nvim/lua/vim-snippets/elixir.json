{
  "do": {
    "prefix": "do",
    "body": [
      "do",
      "\t${0:$TM_SELECTED_TEXT}",
      "end"
    ]
  },
  "put": {
    "prefix": "put",
    "description": "IO.puts",
    "body": "IO.puts(\"$0\")"
  },
  "ins": {
    "prefix": "ins",
    "description": "IO.inspect",
    "body": "IO.inspect($0)"
  },
  "insl": {
    "prefix": "insl",
    "description": "IO.inspect with label",
    "body": "IO.inspect($0label: \"${1:label}\")"
  },
  "if": {
    "prefix": "if",
    "description": "if .. do .. end",
    "body": [
      "if $1 do",
      "\t${0:$TM_SELECTED_TEXT}",
      "end"
    ]
  },
  "if:": {
    "prefix": "if:",
    "description": "if .. do: ..",
    "body": "if $1, do: $0"
  },
  "ife": {
    "prefix": "ife",
    "description": "if .. do .. else .. end",
    "body": [
      "if $1 do",
      "\t${2:$TM_SELECTED_TEXT}",
      "else",
      "\t$0",
      "end"
    ]
  },
  "ife:": {
    "prefix": "ife:",
    "description": "if .. do: .. else:",
    "body": "if $1, do: $2, else: $0"
  },
  "unless": {
    "prefix": "unless",
    "description": "unless .. do .. end",
    "body": [
      "unless $1 do",
      "\t${0:$TM_SELECTED_TEXT}",
      "end"
    ]
  },
  "unless:": {
    "prefix": "unless:",
    "description": "unless .. do: ..",
    "body": "unless $1, do: $0"
  },
  "unlesse": {
    "prefix": "unlesse",
    "description": "unless .. do .. else .. end",
    "body": [
      "unless $1 do",
      "\t${2:$TM_SELECTED_TEXT}",
      "else",
      "\t$0",
      "end"
    ]
  },
  "unlesse:": {
    "prefix": "unlesse:",
    "description": "unless .. do: .. else:",
    "body": "unless $1, do: $2, else: $0"
  },
  "cond": {
    "prefix": "cond",
    "body": [
      "cond do",
      "\t$1 ->",
      "\t${0:$TM_SELECTED_TEXT}",
      "end"
    ]
  },
  "case": {
    "prefix": "case",
    "body": [
      "case $1 do",
      "\t$2 ->",
      "\t\t$0",
      "end"
    ]
  },
  "for": {
    "prefix": "for",
    "body": [
      "for ${1:item} <- ${2:items} do",
      "\t$0",
      "end"
    ]
  },
  "for:": {
    "prefix": "for:",
    "body": "for ${1:item} <- ${2:items}, do: $0"
  },
  "fori": {
    "prefix": "fori",
    "body": [
      "for ${1:item} <- ${2:items}, into: $3 do",
      "\t$0",
      "end"
    ]
  },
  "wi": {
    "prefix": "wi",
    "body": [
      "with ${1:item} <- ${2:items} do",
      "\t$0",
      "end"
    ]
  },
  "wie": {
    "prefix": "wie",
    "body": [
      "with(",
      "\t${1:item} <- ${2:items}",
      ") do",
      "\t$3",
      "else",
      "\t$4 ->",
      "\t\t$0",
      "end"
    ]
  },
  "sp": {
    "prefix": "sp",
    "body": "@spec ${1:name}(${2:args}) :: ${3:returns}"
  },
  "op": {
    "prefix": "op",
    "body": "@opaque ${1:type_name} :: ${2:type}"
  },
  "ty": {
    "prefix": "ty",
    "body": "@type ${1:type_name} :: ${2:type}"
  },
  "typ": {
    "prefix": "typ",
    "body": "@typep ${1:type_name} :: ${2:type}"
  },
  "cb": {
    "prefix": "cb",
    "body": "@callback ${1:name}(${2:args}) :: ${3:returns}"
  },
  "df": {
    "prefix": "df",
    "body": "def ${1:name}, do: $2"
  },
  "dfw": {
    "prefix": "dfw",
    "body": "def ${1:name}(${2:args}) when ${3:guard}, do:"
  },
  "def": {
    "prefix": "def",
    "body": [
      "def ${1:name} do",
      "\t$0",
      "end"
    ]
  },
  "defd": {
    "prefix": "defd",
    "body": [
      "@doc \"\"\"",
      "${1:doc string}",
      "\"\"\"",
      "def ${2:name} do",
      "\t$0",
      "end"
    ]
  },
  "defs": {
    "prefix": "defs",
    "body": [
      "@spec ${1:name}(${2:arg types}) :: ${3:no_return}",
      "def $1(${4:args}) do",
      "\t$0",
      "end"
    ]
  },
  "defsd": {
    "prefix": "defsd",
    "body": [
      "@doc \"\"\"",
      "${1:doc string}",
      "\"\"\"",
      "@spec ${2:name}(${3:arg types}) :: ${4:no_return}",
      "def $2(${5:args}) do",
      "\t$0",
      "end"
    ]
  },
  "defw": {
    "prefix": "defw",
    "body": [
      "def ${1:name}(${2:args}) when ${3:guard} do",
      "\t$0",
      "end"
    ]
  },
  "defim": {
    "prefix": "defim",
    "body": [
      "defimpl ${1:protocol_name}, for: ${2:data_type} do",
      "\t$0",
      "end"
    ]
  },
  "defma": {
    "prefix": "defma",
    "body": [
      "defmacro ${1:name} do",
      "\t$0",
      "end"
    ]
  },
  "%M": {
    "prefix": "%M",
    "body": [
      "%__MODULE__{",
      "\t${1:key_name}: ${2:value}",
      "\\}"
    ]
  },
  "enfk": {
    "prefix": "enfk",
    "body": "@enforce_keys [:${1:key_name}]"
  },
  "dfp": {
    "prefix": "dfp",
    "body": "defp ${1:name}, do: $2"
  },
  "dfpw": {
    "prefix": "dfpw",
    "body": "defp ${1:name}(${2:args}) when ${3:guard}, do: $4"
  },
  "defp": {
    "prefix": "defp",
    "body": [
      "defp ${1:name} do",
      "\t$0",
      "end"
    ]
  },
  "defpw": {
    "prefix": "defpw",
    "body": [
      "defp ${1:name}(${2:args}) when ${3:guard} do",
      "\t$0",
      "end"
    ]
  },
  "defpr": {
    "prefix": "defpr",
    "body": "defprotocol ${1:name}, [${0:function}]"
  },
  "defr": {
    "prefix": "defr",
    "body": "defrecord ${1:record_name}, ${0:fields}"
  },
  "doc": {
    "prefix": "doc",
    "body": [
      "@doc \"\"\"",
      "$0",
      "\"\"\""
    ]
  },
  "docs": {
    "prefix": "docs",
    "body": [
      "@doc ~S\"\"\"",
      "$0",
      "\"\"\""
    ]
  },
  "docf": {
    "prefix": "docf",
    "body": "@doc false"
  },
  "im": {
    "prefix": "im",
    "body": "@impl true"
  },
  "fn": {
    "prefix": "fn",
    "body": "fn ${1:args} -> $0 end"
  },
  "mdoc": {
    "prefix": "mdoc",
    "body": [
      "@moduledoc \"\"\"",
      "$0",
      "\"\"\""
    ]
  },
  "mdocs": {
    "prefix": "mdocs",
    "body": [
      "@moduledoc ~S\"\"\"",
      "$0",
      "\"\"\""
    ]
  },
  "mdocf": {
    "prefix": "mdocf",
    "body": "@moduledoc false"
  },
  "rec": {
    "prefix": "rec",
    "body": [
      "receive do",
      "\t$1 ->",
      "\t\t$0",
      "end"
    ]
  },
  "req": {
    "prefix": "req",
    "body": "require ${0:Logger}"
  },
  "imp": {
    "prefix": "imp",
    "body": "import ${0:module_name}"
  },
  "ali": {
    "prefix": "ali",
    "body": "alias ${0:module_name}"
  },
  "test": {
    "prefix": "test",
    "body": [
      "test \"${1:test name}\" do",
      "\t$0",
      "end"
    ]
  },
  "testc": {
    "prefix": "testc",
    "body": [
      "test \"${1:test_name}\", ctx do",
      "\t$0",
      "end"
    ]
  },
  "testa": {
    "prefix": "testa",
    "body": [
      "test \"${1:test_name}\", %{${2:arg: arg}\\} do",
      "\t$0",
      "end"
    ]
  },
  "des": {
    "prefix": "des",
    "body": [
      "describe \"${1:test group subject}\" do",
      "\t$0",
      "end"
    ]
  },
  "destag": {
    "prefix": "destag",
    "body": "@describetag :${1:describe tag}"
  },
  "mtag": {
    "prefix": "mtag",
    "body": "@moduletag :${1:module tag}"
  },
  "dt": {
    "prefix": "dt",
    "body": "doctest ${1:filename}"
  },
  "tp": {
    "prefix": "tp",
    "body": "@tag :pending"
  },
  "setup": {
    "prefix": "setup",
    "body": [
      "setup do",
      "\t$1",
      "end"
    ]
  },
  "setupa": {
    "prefix": "setupa",
    "body": [
      "setup_all do",
      "\t$1",
      "end"
    ]
  },
  "try": {
    "prefix": "try",
    "description": "try .. rescue .. end",
    "body": [
      "try do",
      "\t${1:$TM_SELECTED_TEXT}",
      "rescue",
      "\t$2 -> $0",
      "end"
    ]
  },
  "pry": {
    "prefix": "pry",
    "body": [
      "require IEx; IEx.pry",
      "$0"
    ]
  },
  "ppry": {
    "prefix": "ppry",
    "body": "|> (fn x -> require IEx; IEx.pry; x end).()$0"
  },
  "qu": {
    "prefix": "qu",
    "body": [
      "quote do",
      "\t$1",
      "end"
    ]
  },
  "beh": {
    "prefix": "beh",
    "body": [
      "@behaviour ${1:Mix.Task}",
      "$0"
    ]
  },
  "p": {
    "prefix": "p",
    "body": "|> $0"
  },
  ">e": {
    "prefix": ">e",
    "description": "pipe to each",
    "body": "|> Enum.each(fn $1 -> $0 end)"
  },
  ">m": {
    "prefix": ">m",
    "description": "pipe to map",
    "body": "|> Enum.map(fn $1 -> $0 end)"
  },
  ">f": {
    "prefix": ">f",
    "description": "pipe to filter",
    "body": "|> Enum.filter(fn $1 -> $0 end)"
  },
  ">r": {
    "prefix": ">r",
    "description": "pipe to reduce",
    "body": "|> Enum.reduce(${1:acc}, fn $2, ${3:acc} -> $0 end)"
  },
  ">i": {
    "prefix": ">i",
    "description": "pipe to inspect",
    "body": "|> IO.inspect()"
  },
  ">il": {
    "prefix": ">il",
    "description": "pipe to inspect with label",
    "body": "|> IO.inspect(label: \"${1:label}\")"
  },
  "cs": {
    "prefix": "cs",
    "body": [
      "@doc false",
      "def child_spec(${1:_opts}) do",
      "\t%{",
      "\t\tid: __MODULE__,",
      "\t\tstart: {__MODULE__, :start_link, ${2:[]}\\},",
      "\t\trestart: ${3::permanent},",
      "\t\tshutdown: ${4:5000},",
      "\t\ttype: ${5::worker}",
      "\t\\}",
      "end"
    ]
  },
  "genserver": {
    "prefix": "genserver",
    "description": "basic genserver structure",
    "body": [
      "use GenServer",
      "",
      "@doc false",
      "def start_link(init_args) do",
      "\tGenServer.start_link(__MODULE__, init_args, name: __MODULE__)",
      "end",
      "",
      "@impl true",
      "def init(state) do",
      "\t{:ok, state\\}",
      "end"
    ]
  },
  "super": {
    "prefix": "super",
    "description": "basic supervisor structure",
    "body": [
      "use Supervisor",
      "",
      "@doc false",
      "def start_link(init_args) do",
      "\tSupervisor.start_link(__MODULE__, init_args, name: __MODULE__)",
      "end",
      "",
      "@impl true",
      "def init(_init_args) do",
      "\tchildren = [$1]",
      "\tSupervisor.init(children, strategy: :one_for_one)",
      "end"
    ]
  },
  "impl": {
    "prefix": "impl",
    "body": [
      "@impl true",
      "def ${1:name} do",
      "\t$0",
      "end"
    ]
  },
  "wl": {
    "prefix": "wl",
    "description": "word list",
    "body": "~w($0)"
  },
  "al": {
    "prefix": "al",
    "description": "atom list",
    "body": "~w($0)a"
  }
}
