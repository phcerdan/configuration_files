{
  "v": {
    "prefix": "v",
    "description": "\"shorthand variable declaration\"",
    "body": [
      "$1 := $2",
      ""
    ]
  },
  "vr": {
    "prefix": "vr",
    "description": "\"variable initialization\"",
    "body": [
      "var ${1:t} ${0:string}",
      ""
    ]
  },
  "var": {
    "prefix": "var",
    "description": "\"variable declaration\"",
    "body": [
      "var $1 $2 = $3",
      ""
    ]
  },
  "vars": {
    "prefix": "vars",
    "description": "\"variables declaration\"",
    "body": [
      "var (",
      "\t$1 $2 = $3",
      ")",
      ""
    ]
  },
  "ap": {
    "prefix": "ap",
    "description": "\"append\"",
    "body": [
      "append(${1:slice}, ${0:value})",
      ""
    ]
  },
  "bl": {
    "prefix": "bl",
    "description": "\"bool\"",
    "body": [
      "bool",
      ""
    ]
  },
  "bt": {
    "prefix": "bt",
    "description": "\"byte\"",
    "body": [
      "byte",
      ""
    ]
  },
  "br": {
    "prefix": "br",
    "description": "\"break\"",
    "body": [
      "break",
      ""
    ]
  },
  "ch": {
    "prefix": "ch",
    "description": "\"channel\"",
    "body": [
      "chan ${0:int}",
      ""
    ]
  },
  "cs": {
    "prefix": "cs",
    "description": "\"case\"",
    "body": [
      "case ${1:value}:",
      "\t${0:$TM_SELECTED_TEXT}",
      ""
    ]
  },
  "co": {
    "prefix": "co",
    "description": "\"constants with iota\"",
    "body": [
      "const (",
      "\t${1:NAME1} = iota",
      "\t${0:NAME2}",
      ")",
      ""
    ]
  },
  "cn": {
    "prefix": "cn",
    "description": "\"continue\"",
    "body": [
      "continue",
      ""
    ]
  },
  "df": {
    "prefix": "df",
    "description": "\"defer\"",
    "body": [
      "defer ${0:func}()",
      ""
    ]
  },
  "dfr": {
    "prefix": "dfr",
    "description": "\"defer recover\"",
    "body": [
      "defer func() {",
      "\tif err := recover(); err != nil {",
      "\t\t${0:$TM_SELECTED_TEXT}",
      "\t\\}",
      "\\}()",
      ""
    ]
  },
  "im": {
    "prefix": "im",
    "description": "\"import\"",
    "body": [
      "import (",
      "\t\"${1:package}\"",
      ")",
      ""
    ]
  },
  "in": {
    "prefix": "in",
    "description": "\"interface\"",
    "body": [
      "interface{\\}",
      ""
    ]
  },
  "inf": {
    "prefix": "inf",
    "description": "\"full interface \"",
    "body": [
      "interface ${1:name} {",
      "\t${2:/* methods */}",
      "\\}",
      ""
    ]
  },
  "if": {
    "prefix": "if",
    "description": "\"if condition\"",
    "body": [
      "if $1 {",
      "\t${2:$TM_SELECTED_TEXT}",
      "\\}",
      "",
      ""
    ]
  },
  "ife": {
    "prefix": "ife",
    "description": "\"if else condition\"",
    "body": [
      "if $1 {",
      "\t${2:$TM_SELECTED_TEXT}",
      "\\} else {",
      "\t$0",
      "\\}",
      ""
    ]
  },
  "el": {
    "prefix": "el",
    "description": "\"else\"",
    "body": [
      "else {",
      "\t${0:$TM_SELECTED_TEXT}",
      "\\}",
      ""
    ]
  },
  "ir": {
    "prefix": "ir",
    "description": "\"if error not nil, return err\"",
    "body": [
      "if err != nil {",
      "\treturn err",
      "\\}",
      "$0",
      ""
    ]
  },
  "f": {
    "prefix": "f",
    "description": "\"false\"",
    "body": [
      "false",
      ""
    ]
  },
  "ft": {
    "prefix": "ft",
    "description": "\"fallthrough\"",
    "body": [
      "fallthrough",
      ""
    ]
  },
  "fl": {
    "prefix": "fl",
    "description": "\"float\"",
    "body": [
      "float32",
      ""
    ]
  },
  "f3": {
    "prefix": "f3",
    "description": "\"float32\"",
    "body": [
      "float32",
      ""
    ]
  },
  "f6": {
    "prefix": "f6",
    "description": "\"float64\"",
    "body": [
      "float64",
      ""
    ]
  },
  "for": {
    "prefix": "for",
    "description": "\"for loop\"",
    "body": [
      "for $1{",
      "\t${0:$TM_SELECTED_TEXT}",
      "\\}",
      ""
    ]
  },
  "fori": {
    "prefix": "fori",
    "description": "\"for int loop\"",
    "body": [
      "for ${2:i} := 0; $2 < ${1:count}; $2${3:++} {",
      "\t${0:$TM_SELECTED_TEXT}",
      "\\}",
      ""
    ]
  },
  "forr": {
    "prefix": "forr",
    "description": "\"for range loop\"",
    "body": [
      "for ${1:e} := range ${2:collection} {",
      "\t${0:$TM_SELECTED_TEXT}",
      "\\}",
      ""
    ]
  },
  "fun": {
    "prefix": "fun",
    "description": "\"function\"",
    "body": [
      "func ${1:funcName}($2) ${3:error} {",
      "\t$4",
      "\\}",
      "$0",
      ""
    ]
  },
  "fum": {
    "prefix": "fum",
    "description": "\"method\"",
    "body": [
      "func (${1:receiver} ${2:type}) ${3:funcName}($4) ${5:error} {",
      "\t$6",
      "\\}",
      "$0",
      ""
    ]
  },
  "fumh": {
    "prefix": "fumh",
    "description": "\"http handler function on receiver\"",
    "body": [
      "func (${1:receiver} ${2:type}) ${3:funcName}(${4:w} http.ResponseWriter, ${5:r} *http.Request) {",
      "\t${0:$TM_SELECTED_TEXT}",
      "\\}",
      ""
    ]
  },
  "lf": {
    "prefix": "lf",
    "description": "\"log printf\"",
    "body": [
      "log.Printf(\"%${1:s}\", ${2:var})",
      ""
    ]
  },
  "lp": {
    "prefix": "lp",
    "description": "\"log println\"",
    "body": [
      "log.Println(\"$1\")",
      ""
    ]
  },
  "mk": {
    "prefix": "mk",
    "description": "\"make\"",
    "body": [
      "make(${1:[]string}, ${0:0})",
      ""
    ]
  },
  "mp": {
    "prefix": "mp",
    "description": "\"map\"",
    "body": [
      "map[${1:string}]${0:int}",
      ""
    ]
  },
  "main": {
    "prefix": "main",
    "description": "\"func main()\"",
    "body": [
      "func main() {",
      "\t$1",
      "\\}",
      "$0",
      ""
    ]
  },
  "nw": {
    "prefix": "nw",
    "description": "\"new\"",
    "body": [
      "new(${0:type})",
      ""
    ]
  },
  "pa": {
    "prefix": "pa",
    "description": "\"package\"",
    "body": [
      "package ${1:main}",
      ""
    ]
  },
  "pn": {
    "prefix": "pn",
    "description": "\"panic\"",
    "body": [
      "panic(\"${0:msg}\")",
      ""
    ]
  },
  "pf": {
    "prefix": "pf",
    "description": "\"fmt.Printf()\"",
    "body": [
      "fmt.Printf(\"%${1:s}n\", ${2:var})",
      ""
    ]
  },
  "pl": {
    "prefix": "pl",
    "description": "\"fmt.Println()\"",
    "body": [
      "fmt.Println(\"${1:s}\")",
      ""
    ]
  },
  "rn": {
    "prefix": "rn",
    "description": "\"range\"",
    "body": [
      "range $0",
      ""
    ]
  },
  "rt": {
    "prefix": "rt",
    "description": "\"return\"",
    "body": [
      "return $0",
      ""
    ]
  },
  "rs": {
    "prefix": "rs",
    "description": "\"result\"",
    "body": [
      "result",
      ""
    ]
  },
  "sl": {
    "prefix": "sl",
    "description": "\"select\"",
    "body": [
      "select {",
      "case ${1:v1} := <-${2:chan1}",
      "\t$3",
      "default:",
      "\t$0",
      "\\}",
      ""
    ]
  },
  "sr": {
    "prefix": "sr",
    "description": "\"string\"",
    "body": [
      "string",
      ""
    ]
  },
  "st": {
    "prefix": "st",
    "description": "\"struct\"",
    "body": [
      "struct ${1:name} {",
      "\t${2:/* data */}",
      "\\}",
      "$0",
      ""
    ]
  },
  "sw": {
    "prefix": "sw",
    "description": "\"switch\"",
    "body": [
      "switch ${1:var} {",
      "case ${2:value1}:",
      "\t$3",
      "case ${4:value2}:",
      "\t$5",
      "default:",
      "\t$0",
      "\\}",
      ""
    ]
  },
  "ps": {
    "prefix": "ps",
    "description": "\"fmt.Sprintf\"",
    "body": [
      "fmt.Sprintf(\"%${1:s}\", ${2:var})",
      ""
    ]
  },
  "t": {
    "prefix": "t",
    "description": "\"true\"",
    "body": [
      "true",
      ""
    ]
  },
  "g": {
    "prefix": "g",
    "description": "\"goroutine named function\"",
    "body": [
      "go ${1:funcName}($0)",
      ""
    ]
  },
  "ga": {
    "prefix": "ga",
    "description": "\"goroutine anonymous function\"",
    "body": [
      "go func($1 ${2:type}) {",
      "\t${3:/* code */}",
      "\\}($0)",
      ""
    ]
  },
  "test": {
    "prefix": "test",
    "description": "\"test function\"",
    "body": [
      "func Test${1:name}(t *testing.T) {",
      "\t${0:$TM_SELECTED_TEXT}",
      "\\}",
      ""
    ]
  },
  "testt": {
    "prefix": "testt",
    "description": "\"table test function\"",
    "body": [
      "func Test${1:name}(t *testing.T) {",
      "\ttests := []struct {",
      "\t\tname string",
      "\t\\}{",
      "\t\t{",
      "\t\t\tname: \"${2:test name}\",",
      "\t\t\\},",
      "\t\\}",
      "",
      "\tfor _, test := range tests {",
      "\t\tt.Run(test.name, func(t *testing.T) {",
      "\t\t\t${0:$TM_SELECTED_TEXT}",
      "\t\t\\})",
      "\t\\}",
      "\\}",
      ""
    ]
  },
  "bench": {
    "prefix": "bench",
    "description": "\"benchmark function\"",
    "body": [
      "func Benchmark${1:name}(b *testing.B) {",
      "\tfor i := 0; i < b.N; i++ {",
      "\t\t$2",
      "\t\\}",
      "\\}",
      "$0",
      ""
    ]
  },
  "cl": {
    "prefix": "cl",
    "description": "\"composite literals\"",
    "body": [
      "type ${1:name} struct {",
      "\t${2:attrName} ${3:attrType}",
      "\\}",
      ""
    ]
  },
  "om": {
    "prefix": "om",
    "description": "\"if key in a map\"",
    "body": [
      "if ${1:value}, ok := ${2:map}[${3:key}]; ok == true {",
      "\t${4:/* code */}",
      "\\}",
      "",
      ""
    ]
  },
  "gg": {
    "prefix": "gg",
    "description": "\"Grouped globals with anonymous struct\"",
    "body": [
      "var ${1:var} = struct{",
      "\t${2:name} ${3:type}",
      "\\}{",
      "\t$2: ${4:value},",
      "\\}",
      "",
      ""
    ]
  },
  "ja": {
    "prefix": "ja",
    "description": "\"Marshalable json alias\"",
    "body": [
      "type ${1:parentType}Alias $1",
      "",
      "func (p *$1) MarshalJSON() ([]byte, error) {",
      "\treturn json.Marshal(&struct{ *$1Alias \\}{(*$1Alias)(p)\\})",
      "\\}",
      "",
      ""
    ]
  },
  "errwr": {
    "prefix": "errwr",
    "description": "\"Error handling with fmt.Errorf\"",
    "body": [
      "if $1err != nil {",
      "\treturn fmt.Errorf(\"$2 %w\", err)",
      "\\}"
    ]
  }
}
