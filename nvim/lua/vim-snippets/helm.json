{
  "service_sample_spec": {
    "prefix": "service_sample_spec",
    "body": [
      "apiVersion: v1",
      "kind: Service",
      "metadata:",
      "{{- if .Values.$1.service.annotations \\}\\}",
      "  annotations:",
      "{{ toYaml .Values.$1.service.annotations | indent 4 \\}\\}",
      "{{- end \\}\\}",
      "  labels:",
      "{{- if .Values.$1.service.labels \\}\\}",
      "{{ toYaml .Values.$1.service.labels | indent 4 \\}\\}",
      "{{- end \\}\\}",
      "\tapp: {{ template \"$2.name\" . \\}\\}",
      "\tchart: {{ .Chart.Name \\}\\}-{{ .Chart.Version \\}\\}",
      "\tcomponent: \"{{ .Values.$1.name \\}\\}\"",
      "\theritage: {{ .Release.Service \\}\\}",
      "\trelease: {{ .Release.Name \\}\\}",
      "  name: {{ template \"$2.$1.fullname\" . \\}\\}",
      "spec:",
      "  clusterIP: \"{{ .Values.$1.service.clusterIP \\}\\}\"",
      "{{- if .Values.$1.service.externalIPs \\}\\}",
      "  externalIPs:",
      "{{ toYaml .Values.$1.service.externalIPs | indent 4 \\}\\}",
      "{{- end \\}\\}",
      "{{- if .Values.$1.service.loadBalancerIP \\}\\}",
      "  loadBalancerIP: \"{{ .Values.$1.service.loadBalancerIP \\}\\}\"",
      "{{- end \\}\\}",
      "{{- if .Values.$1.service.loadBalancerSourceRanges \\}\\}",
      "  loadBalancerSourceRanges:",
      "{{ toYaml .Values.$1.service.loadBalancerSourceRanges | indent 4 \\}\\}",
      "{{- end \\}\\}",
      "  healthCheckNodePort: {{ .Values.$1.service.healthCheckNodePort \\}\\}",
      "  ports:",
      "\t- name: http",
      "\t  port: 80",
      "\t  protocol: TCP",
      "\t  targetPort: {{ .Values.$1.service.targetPorts.http \\}\\}",
      "\t  {{- if (and (eq .Values.$1.service.type \"NodePort\") (not (empty .Values.$1.service.nodePorts.http))) \\}\\}",
      "\t  nodePort: {{ .Values.$1.service.nodePorts.http \\}\\}",
      "\t  {{- end \\}\\}",
      "\t- name: https",
      "\t  port: 443",
      "\t  protocol: TCP",
      "\t  targetPort: {{ .Values.$1.service.targetPorts.https \\}\\}",
      "\t  {{- if (and (eq .Values.$1.service.type \"NodePort\") (not (empty .Values.$1.service.nodePorts.https))) \\}\\}",
      "\t  nodePort: {{ .Values.$1.service.nodePorts.https \\}\\}",
      "\t  {{- end \\}\\}",
      "  {{- range \\$key, \\$value := .Values.tcp \\}\\}",
      "\t- name: \"{{ \\$key \\}\\}-tcp\"",
      "\t  port: {{ \\$key \\}\\}",
      "\t  protocol: TCP",
      "\t  targetPort: \"{{ \\$key \\}\\}-tcp\"",
      "  {{- end \\}\\}",
      "  {{- range \\$key, \\$value := .Values.udp \\}\\}",
      "\t- name: \"{{ \\$key \\}\\}-udp\"",
      "\t  port: {{ \\$key \\}\\}",
      "\t  protocol: UDP",
      "\t  targetPort: \"{{ \\$key \\}\\}-udp\"",
      "  {{- end \\}\\}",
      "  selector:",
      "\tapp: {{ template \"${2:chartName}.name\" . \\}\\}",
      "\tcomponent: \"{{ .Values.$1.name \\}\\}\"",
      "\trelease: {{ .Release.Name \\}\\}",
      "  type: \"{{ .Values.${1:value_key}.service.type \\}\\}\"",
      ""
    ]
  },
  "annotations_spec": {
    "prefix": "annotations_spec",
    "body": [
      "{{- if .Values.$1.service.annotations \\}\\}",
      "  annotations:",
      "{{ toYaml .Values.${1:value_key}.service.annotations | indent 4 \\}\\}",
      "{{- end \\}\\}",
      "$0",
      ""
    ]
  },
  "labels_spec": {
    "prefix": "labels_spec",
    "body": [
      " labels:",
      "{{- if .Values.$1.service.labels \\}\\}",
      "{{ toYaml .Values.$1.service.labels | indent 4 \\}\\}",
      "{{- end \\}\\}",
      "\tapp: {{ template \"$2.name\" . \\}\\}",
      "\tchart: {{ .Chart.Name \\}\\}-{{ .Chart.Version \\}\\}",
      "\tcomponent: \"{{ .Values.$1.name \\}\\}\"",
      "\theritage: {{ .Release.Service \\}\\}",
      "\trelease: {{ .Release.Name \\}\\}",
      "  name: {{ template \"${2:chartName}.${1:value_key}.fullname\" . \\}\\}",
      "$0",
      ""
    ]
  },
  "service_spec": {
    "prefix": "service_spec",
    "body": [
      "spec:",
      "  type: \"{{ .Values.$1.service.type \\}\\}\"",
      "  clusterIP: \"{{ .Values.$1.service.clusterIP \\}\\}\"",
      "{{- if .Values.$1.service.externalIPs \\}\\}",
      "  externalIPs:",
      "{{ toYaml .Values.$1.service.externalIPs | indent 4 \\}\\}",
      "{{- end \\}\\}",
      "{{- if .Values.$1.service.loadBalancerIP \\}\\}",
      "  loadBalancerIP: \"{{ .Values.$1.service.loadBalancerIP \\}\\}\"",
      "{{- end \\}\\}",
      "{{- if .Values.$1.service.loadBalancerSourceRanges \\}\\}",
      "  loadBalancerSourceRanges:",
      "{{ toYaml .Values.$1.service.loadBalancerSourceRanges | indent 4 \\}\\}",
      "{{- end \\}\\}",
      "{{- if and (semverCompare \">=1.7-0\" .Capabilities.KubeVersion.GitVersion) (.Values.$1.service.externalTrafficPolicy) \\}\\}",
      "  externalTrafficPolicy: \"{{ .Values.$1.service.externalTrafficPolicy \\}\\}\"",
      "{{- end \\}\\}",
      "{{- if and (semverCompare \">=1.7-0\" .Capabilities.KubeVersion.GitVersion) (.Values.$1.service.healthCheckNodePort) \\}\\}",
      "  healthCheckNodePort: {{ .Values.${1:value_key}.service.healthCheckNodePort \\}\\}",
      "{{- end \\}\\}",
      "$0",
      ""
    ]
  },
  "ports_spec": {
    "prefix": "ports_spec",
    "body": [
      "ports:",
      "$0",
      ""
    ]
  },
  "portHTTP_spec": {
    "prefix": "portHTTP_spec",
    "body": [
      "- name: http",
      "  port: 80",
      "  protocol: TCP",
      "  targetPort: {{ .Values.$1.service.targetPorts.http \\}\\}",
      "  {{- if (and (eq .Values.$1.service.type \"NodePort\") (not (empty .Values.$1.service.nodePorts.http))) \\}\\}",
      "  nodePort: {{ .Values.${1:value_key}.service.nodePorts.http \\}\\}",
      "  {{- end \\}\\}",
      "  $0",
      ""
    ]
  },
  "portHTTPS_spec": {
    "prefix": "portHTTPS_spec",
    "body": [
      "- name: https",
      "  port: 443",
      "  protocol: TCP",
      "  targetPort: {{ .Values.$1.service.targetPorts.https \\}\\}",
      "  {{- if (and (eq .Values.$1.service.type \"NodePort\") (not (empty .Values.$1.service.nodePorts.https))) \\}\\}",
      "  nodePort: {{ .Values.${1:value_key}.service.nodePorts.https \\}\\}",
      "  {{- end \\}\\}",
      "  $0",
      ""
    ]
  },
  "portTCP_spec": {
    "prefix": "portTCP_spec",
    "body": [
      "{{- range \\$key, \\$value := .Values.tcp \\}\\}",
      "  - name: \"{{ \\$key \\}\\}-tcp\"",
      "\tport: {{ \\$key \\}\\}",
      "\tprotocol: TCP",
      "\ttargetPort: \"{{ \\$key \\}\\}-tcp\"",
      "{{- end \\}\\}",
      "$0",
      ""
    ]
  },
  "portUDP_spec": {
    "prefix": "portUDP_spec",
    "body": [
      "{{- range \\$key, \\$value := .Values.udp \\}\\}",
      "  - name: \"{{ \\$key \\}\\}-udp\"",
      "\tport: {{ \\$key \\}\\}",
      "\tprotocol: UDP",
      "\ttargetPort: \"{{ \\$key \\}\\}-udp\"",
      "{{- end \\}\\}",
      "$0",
      "",
      ""
    ]
  },
  "selector_spec": {
    "prefix": "selector_spec",
    "body": [
      "selector:",
      "  app: {{ template \"${2:chartName}.name\" . \\}\\}",
      "  component: \"{{ .Values.${1:value_key}.name \\}\\}\"",
      "  release: {{ .Release.Name \\}\\}",
      "  $0",
      "",
      ""
    ]
  },
  "deploy_sample_spec": {
    "prefix": "deploy_sample_spec",
    "body": [
      "{{- if .Values.$1.enabled \\}\\}",
      "apiVersion: extensions/v1beta1",
      "kind: Deployment",
      "metadata:",
      "  labels:",
      "\tapp: {{ template \"$2.name\" . \\}\\}",
      "\tchart: {{ .Chart.Name \\}\\}-{{ .Chart.Version \\}\\}",
      "\tcomponent: \"{{ .Values.$1.name \\}\\}\"",
      "\theritage: {{ .Release.Service \\}\\}",
      "\trelease: {{ .Release.Name \\}\\}",
      "  name: {{ template \"$2.$1.fullname\" . \\}\\}",
      "spec:",
      "  replicas: {{ .Values.$1.replicaCount \\}\\}",
      "  revisionHistoryLimit: {{ .Values.revisionHistoryLimit \\}\\}",
      "  template:",
      "\tmetadata:",
      "\t{{- if .Values.$1.podAnnotations \\}\\}",
      "\t  annotations:",
      "{{ toYaml .Values.$1.podAnnotations | indent 8 \\}\\}",
      "\t{{- end \\}\\}",
      "\t  labels:",
      "\t\tapp: {{ template \"$2.name\" . \\}\\}",
      "\t\tcomponent: \"{{ .Values.$1.name \\}\\}\"",
      "\t\trelease: {{ .Release.Name \\}\\}",
      "\t\t{{- if .Values.$1.podLabels \\}\\}",
      "{{ toYaml .Values.$1.podLabels | indent 8 \\}\\}",
      "\t\t{{- end \\}\\}",
      "\tspec:",
      "\t  {{- if .Values.imagePullSecrets \\}\\}",
      "\t  imagePullSecrets:",
      "{{ toYaml .Values.imagePullSecrets | indent 8 \\}\\}",
      "\t  {{- end \\}\\}",
      "\t  containers:",
      "\t\t- name: {{ template \"${2:chartName}.name\" . \\}\\}-{{ .Values.$1.name \\}\\}",
      "\t\t  image: \"{{ .Values.$1.image.repository \\}\\}:{{ .Values.$1.image.tag \\}\\}\"",
      "\t\t  imagePullPolicy: \"{{ .Values.$1.image.pullPolicy \\}\\}\"",
      "\t\t  args:",
      "\t\t  {{- range \\$key, \\$value := .Values.$1.extraArgs \\}\\}",
      "\t\t\t{{- if \\$value \\}\\}",
      "\t\t\t- --{{ \\$key \\}\\}={{ \\$value \\}\\}",
      "\t\t\t{{- else \\}\\}",
      "\t\t\t- --{{ \\$key \\}\\}",
      "\t\t\t{{- end \\}\\}",
      "\t\t  {{- end \\}\\}",
      "\t\t  livenessProbe:",
      "\t\t\thttpGet:",
      "\t\t\t  path: /healthz",
      "\t\t\t  port: 8080",
      "\t\t\t  scheme: HTTP",
      "\t\t\tinitialDelaySeconds: 30",
      "\t\t\ttimeoutSeconds: 5",
      "\t\t  ports:",
      "\t\t\t- name: http",
      "\t\t\t  containerPort: 8080",
      "\t\t\t  protocol: TCP",
      "\t\t  resources:",
      "{{ toYaml .Values.$1.resources | indent 12 \\}\\}",
      "\t{{- if .Values.$1.nodeSelector \\}\\}",
      "\t  nodeSelector:",
      "{{ toYaml .Values.$1.nodeSelector | indent 8 \\}\\}",
      "\t{{- end \\}\\}",
      "\t{{- if .Values.$1.tolerations \\}\\}",
      "\t  tolerations:",
      "{{ toYaml .Values.$1.tolerations | indent 8 \\}\\}",
      "\t{{- end \\}\\}",
      "\t{{- if .Values.$1.affinity \\}\\}",
      "\t  affinity:",
      "{{ toYaml .Values.${1:value_key}.affinity | indent 8 \\}\\}",
      "\t{{- end \\}\\}",
      "\t  terminationGracePeriodSeconds: 60",
      "{{- end \\}\\}",
      "",
      "",
      ""
    ]
  },
  "deploy_spec": {
    "prefix": "deploy_spec",
    "body": [
      "{{- if .Values.$1.enabled \\}\\}",
      "apiVersion: extensions/v1beta1",
      "kind: Deployment",
      "metadata:",
      "  labels:",
      "\tapp: {{ template \"$2.name\" . \\}\\}",
      "\tchart: {{ .Chart.Name \\}\\}-{{ .Chart.Version \\}\\}",
      "\tcomponent: \"{{ .Values.$1.name \\}\\}\"",
      "\theritage: {{ .Release.Service \\}\\}",
      "\trelease: {{ .Release.Name \\}\\}",
      "  name: {{ template \"${2:chartName}.${1:value_key}.fullname\" . \\}\\}",
      "# spec",
      "\t# containers_spec",
      "\t# livenessProbe_spec",
      "\t# PersistentVolumeClaim_spec",
      "\t# initContainers_spec",
      "\t# resources_spec",
      "\t# nodeselector_spec",
      "\t# tolerations_spec",
      "\t# affinity_spec",
      "$0",
      ""
    ]
  },
  "spec_spec": {
    "prefix": "spec_spec",
    "body": [
      "spec:",
      "  replicas: {{ .Values.$1.replicaCount \\}\\}",
      "  revisionHistoryLimit: {{ .Values.revisionHistoryLimit \\}\\}",
      "  template:",
      "\tmetadata:",
      "\t{{- if .Values.$1.podAnnotations \\}\\}",
      "\t  annotations:",
      "{{ toYaml .Values.$1.podAnnotations | indent 8 \\}\\}",
      "\t{{- end \\}\\}",
      "\t  labels:",
      "\t\tapp: {{ template \"${2:chartName}.name\" . \\}\\}",
      "\t\tcomponent: \"{{ .Values.$1.name \\}\\}\"",
      "\t\trelease: {{ .Release.Name \\}\\}",
      "\t\t{{- if .Values.$1.podLabels \\}\\}",
      "{{ toYaml .Values.${1:value_key}.podLabels | indent 8 \\}\\}",
      "\t\t{{- end \\}\\}",
      "\tspec:",
      "\t  {{- if .Values.imagePullSecrets \\}\\}",
      "\t  imagePullSecrets:",
      "{{ toYaml .Values.imagePullSecrets | indent 8 \\}\\}",
      "\t  {{- end \\}\\}",
      "\t  $0",
      ""
    ]
  },
  "imagePullSecrets_spec": {
    "prefix": "imagePullSecrets_spec",
    "body": [
      "\t  {{- if .Values.imagePullSecrets \\}\\}",
      "\t  imagePullSecrets:",
      "{{ toYaml .Values.imagePullSecrets | indent 8 \\}\\}",
      "\t  {{- end \\}\\}",
      "$0",
      ""
    ]
  },
  "imagePullPolicy_spec": {
    "prefix": "imagePullPolicy_spec",
    "body": [
      "imagePullPolicy: ${1:imagePullPolicy}",
      "$0",
      ""
    ]
  },
  "containers_spec": {
    "prefix": "containers_spec",
    "body": [
      "containers:",
      "  - name: {{ template \"${2:chartName}.name\" . \\}\\}-{{ .Values.$1.name \\}\\}",
      "\timage: \"{{ .Values.$1.image.repository \\}\\}:{{ .Values.$1.image.tag \\}\\}\"",
      "\timagePullPolicy: \"{{ .Values.${1:value_key}.image.pullPolicy \\}\\}\"",
      "$0"
    ]
  },
  "args_spec": {
    "prefix": "args_spec",
    "body": [
      "args:",
      "{{- range \\$key, \\$value := .Values.${1:value_key}.extraArgs \\}\\}",
      "  {{- if \\$value \\}\\}",
      "  - --{{ \\$key \\}\\}={{ \\$value \\}\\}",
      "  {{- else \\}\\}",
      "  - --{{ \\$key \\}\\}",
      "  {{- end \\}\\}",
      "{{- end \\}\\}",
      "$0"
    ]
  },
  "livenessProbe_spec": {
    "prefix": "livenessProbe_spec",
    "body": [
      "livenessProbe:",
      "  httpGet:",
      "\tpath: /healthz",
      "\tport: 8080",
      "\tscheme: HTTP",
      "  initialDelaySeconds: 30",
      "  timeoutSeconds: 5",
      "$0"
    ]
  },
  "readinessProbe_spec": {
    "prefix": "readinessProbe_spec",
    "body": [
      "readinessProbe:",
      "  httpGet:",
      "\tpath: /go/api/v1/health",
      "\tport: 8153",
      "  initialDelaySeconds: {{ .Values.$1.healthCheck.initialDelaySeconds \\}\\}",
      "  periodSeconds: {{ .Values.$1.healthCheck.periodSeconds \\}\\}",
      "  failureThreshold: {{ .Values.$1.healthCheck.failureThreshold \\}\\}",
      "$0"
    ]
  },
  "resources_spec": {
    "prefix": "resources_spec",
    "body": [
      "resources:",
      "{{ toYaml .Values.${1:value_key}.resources | indent 12 \\}\\}",
      "$0"
    ]
  },
  "nodeselector_spec": {
    "prefix": "nodeselector_spec",
    "body": [
      "{{- if .Values.$1.nodeSelector \\}\\}",
      "  nodeSelector:",
      "{{ toYaml .Values.${1:value_key}.nodeSelector | indent 8 \\}\\}",
      "{{- end \\}\\}",
      "$0"
    ]
  },
  "tolerations_spec": {
    "prefix": "tolerations_spec",
    "body": [
      "{{- if .Values.$1.tolerations \\}\\}",
      "  tolerations:",
      "{{ toYaml .Values.${1:value_key}.tolerations | indent 8 \\}\\}",
      "{{- end \\}\\}",
      "$0"
    ]
  },
  "affinity_spec": {
    "prefix": "affinity_spec",
    "body": [
      "{{- if .Values.$1.affinity \\}\\}",
      "  affinity:",
      "{{ toYaml .Values.${1:value_key}.affinity | indent 8 \\}\\}",
      "{{- end \\}\\}",
      "  terminationGracePeriodSeconds: 60",
      "{{- end \\}\\}",
      "$0",
      ""
    ]
  },
  "PersistentVolumeClaim_spec": {
    "prefix": "PersistentVolumeClaim_spec",
    "body": [
      "kind: PersistentVolumeClaim",
      "apiVersion: v1",
      "metadata:",
      "  name: {{ template \"$2.$1.fullname\" . \\}\\}",
      "  labels:",
      "\tapp: {{ template \"${2:chartName}.name\" . \\}\\}",
      "\tchart: \"{{ .Chart.Name \\}\\}-{{ .Chart.Version \\}\\}\"",
      "\trelease: \"{{ .Release.Name \\}\\}\"",
      "\theritage: \"{{ .Release.Service \\}\\}\"",
      "spec:",
      "  accessModes:",
      "\t- {{ .Values.$1.persistence.accessMode | quote \\}\\}",
      "  resources:",
      "\trequests:",
      "\t  storage: {{ .Values.$1.persistence.size | quote \\}\\}",
      "{{- if .Values.$1.persistence.storageClass \\}\\}",
      "{{- if (eq \"-\" .Values.$1.persistence.storageClass) \\}\\}",
      "  storageClassName: \"\"",
      "{{- else \\}\\}",
      "  storageClassName: \"{{ .Values.${1:value_key}.persistence.storageClass \\}\\}\"",
      "{{- end \\}\\}",
      "{{- end \\}\\}",
      "{{- end \\}\\}",
      "{{- end \\}\\}",
      "$0",
      ""
    ]
  },
  "configMap_spec": {
    "prefix": "configMap_spec",
    "body": [
      "{{- if .Values.artifactory.enabled -\\}\\}",
      "  apiVersion: v1",
      "  kind: ConfigMap",
      "  metadata:",
      "\tname: {{ template \"${2:chartName}.fullname\" . \\}\\}-${1:value_key}-config",
      "\tlabels:",
      "\t  app: {{ template \"$2.name\" . \\}\\}",
      "\t  chart: {{ .Chart.Name \\}\\}-{{ .Chart.Version \\}\\}",
      "\t  heritage: {{ .Release.Service \\}\\}",
      "\t  release: {{ .Release.Name \\}\\}",
      "  data:",
      "\t${3:nameOfConfigFile}.conf: |",
      "\t  # data goes here",
      "{{- end -\\}\\}",
      "$0",
      ""
    ]
  },
  "initContainers_spec": {
    "prefix": "initContainers_spec",
    "body": [
      "{{- if .Values.$1.initContainers \\}\\}",
      "\t  initContainers:",
      "\t  - name: wait-workers",
      "\t\timage: \"{{ .Values.$1.image.repository \\}\\}:{{ .Values.$1.image.tag \\}\\}\"",
      "\t\timagePullPolicy: {{ .Values.${1:value_key}.image.pullPolicy \\}\\}",
      "\t\t# env",
      "\t\tcommand:",
      "\t\t  - sh",
      "\t\t  - -c",
      "\t\t  - |",
      "\t\t\tuntil printf \".\" && nc -z -w 2 {{ template \"${2:chartName}.fullname\" . \\}\\} {{ .Values.postgresql.service.port \\}\\}; do",
      "\t\t\t\tsleep 2;",
      "\t\t\tdone;",
      "",
      "\t\t\techo 'PostgreSQL OK ✓'",
      "\t\t# args",
      "{{- end \\}\\}",
      "$0",
      ""
    ]
  },
  "pvc_spec": {
    "prefix": "pvc_spec",
    "body": [
      "kind: PersistentVolumeClaim",
      "apiVersion: v1",
      "metadata:",
      "  name: {{ template \"$2.fullname\" . \\}\\}",
      "  labels:",
      "\tchart: \"{{ .Chart.Name \\}\\}-{{ .Chart.Version \\}\\}\"",
      "\trelease: \"{{ .Release.Name \\}\\}\"",
      "\theritage: \"{{ .Release.Service \\}\\}\"",
      "\tapp: {{ template \"${2:chartName}.fullname\" . \\}\\}",
      "spec:",
      "  accessModes:",
      "\t- {{ .Values.persistence.accessMode | quote \\}\\}",
      "  resources:",
      "\trequests:",
      "\t  storage: {{ .Values.persistence.size | quote \\}\\}",
      "{{- if .Values.persistence.storageClass \\}\\}",
      "{{- if (eq \"-\" .Values.persistence.storageClass) \\}\\}",
      "  storageClassName: \"\"",
      "{{- else \\}\\}",
      "  storageClassName: \"{{ .Values.persistence.storageClass \\}\\}\"",
      "{{- end \\}\\}",
      "{{- end \\}\\}",
      "{{- end \\}\\}",
      "$0",
      ""
    ]
  },
  "pv_nfs_spec": {
    "prefix": "pv_nfs_spec",
    "body": [
      "apiVersion: v1",
      "kind: PersistentVolume",
      "metadata:",
      "  name: {{ template \"$2.fullname\" . \\}\\}-data-pv",
      "  labels:",
      "\tapp: {{ template \"$2.name\" . \\}\\}",
      "\tchart: {{ .Chart.Name \\}\\}-{{ .Chart.Version \\}\\}",
      "\theritage: {{ .Release.Service \\}\\}",
      "\trelease: {{ .Release.Name \\}\\}",
      "\tid: {{ template \"${2:chartName}.name\" . \\}\\}-data-pv",
      "\ttype: nfs-volume",
      "spec:",
      "  capacity:",
      "\tstorage: {{ .Values.$1.persistence.nfs.capacity \\}\\}",
      "  accessModes:",
      "  - ReadWriteOnce",
      "  persistentVolumeReclaimPolicy: Retain",
      "  nfs:",
      "\tserver: {{ .Values.$1.persistence.nfs.ip \\}\\}",
      "\tpath: \"{{ .Values.${1:value_key}.persistence.nfs.haDataMount \\}\\}\"",
      "\treadOnly: false",
      "$0",
      ""
    ]
  },
  "pvc_hostpath_spec": {
    "prefix": "pvc_hostpath_spec",
    "body": [
      "{{- if and .Values.persistence.enabled .Values.persistence.$1.hostPath (not",
      ".Values.persistence.$1.existingClaim) -\\}\\}",
      "apiVersion: v1",
      "kind: PersistentVolume",
      "metadata:",
      "  name: {{ template \"${2:chartName}.fullname\" . \\}\\}-$1",
      "spec:",
      "  accessModes:",
      "\t- {{ .Values.persistence.$1.accessMode | quote \\}\\}",
      "  capacity:",
      "\tstorage: {{ .Values.persistence.$1.size | quote \\}\\}",
      "  hostPath:",
      "\tpath: {{ .Values.persistence.${1:value_key}.hostPath | quote \\}\\}",
      "{{- end -\\}\\}",
      "$0",
      ""
    ]
  },
  "deploy_values": {
    "prefix": "deploy_values",
    "body": [
      "$1:",
      "  name: ${1:value_key}",
      "  image:",
      "\trepository: ",
      "\ttag: ",
      "\tpullPolicy: IfNotPresent",
      "  hostNetwork: false",
      "  dnsPolicy: ClusterFirst",
      "  daemonset:",
      "\tuseHostPort: false",
      "  podLabels: {\\}",
      "  scope:",
      "\tenabled: false",
      "\tnamespace: \"\"   # defaults to .Release.Namespace",
      "  extraArgs: {\\}",
      "  extraEnvs: []",
      "  kind: Deployment",
      "  updateStrategy: {\\}",
      "  minReadySeconds: 0",
      "  tolerations: []",
      "  affinity: {\\}",
      "  nodeSelector: {\\}",
      "  podAnnotations: {\\}",
      "  replicaCount: 1",
      "  minAvailable: 1",
      "  resources: {\\}",
      "  autoscaling:",
      "\tenabled: false",
      "  extraContainers: {\\}",
      "  extraVolumeMounts: {\\}",
      "  extraVolumes: {\\}",
      "  extraInitContainers: []",
      "  lifecycle: {\\}",
      "revisionHistoryLimit: 10",
      "$0",
      ""
    ]
  },
  "rbac_values": {
    "prefix": "rbac_values",
    "body": [
      "${1:value_key}:",
      "rbac:",
      "  create: true",
      "serviceAccount:",
      "  create: true",
      "  name:",
      "imagePullSecrets: []",
      "$0",
      ""
    ]
  },
  "service_values": {
    "prefix": "service_values",
    "body": [
      "${1:value_key}:",
      "  service:",
      "\tannotations: {\\}",
      "\tlabels: {\\}",
      "\tclusterIP: \"\"",
      "\texternalIPs: []",
      "\tloadBalancerIP: \"\"",
      "\tloadBalancerSourceRanges: []",
      "\texternalTrafficPolicy: \"\"",
      "\thealthCheckNodePort: 0",
      "\ttargetPorts:",
      "\t  http: http",
      "\t  https: https",
      "\ttype: LoadBalancer",
      "\tnodePorts:",
      "\t  http: \"\"",
      "\t  https: \"\"",
      "$0",
      ""
    ]
  },
  "readinessProbe_values": {
    "prefix": "readinessProbe_values",
    "body": [
      "${1:value_key}:",
      "  readinessProbe:",
      "\tfailureThreshold: 3",
      "\tinitialDelaySeconds: 10",
      "\tperiodSeconds: 10",
      "\tsuccessThreshold: 1",
      "\ttimeoutSeconds: 1",
      "\tport: 10254",
      "$0",
      ""
    ]
  },
  "livenessProbe_values": {
    "prefix": "livenessProbe_values",
    "body": [
      "${1:value_key}:",
      "  livenessProbe:",
      "\tfailureThreshold: 3",
      "\tinitialDelaySeconds: 10",
      "\tperiodSeconds: 10",
      "\tsuccessThreshold: 1",
      "\ttimeoutSeconds: 1",
      "\tport: 10254",
      "$0"
    ]
  }
}
