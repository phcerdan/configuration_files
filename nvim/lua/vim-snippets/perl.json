{
  "#!": {
    "prefix": "#!",
    "body": [
      "#!/usr/bin/env perl",
      ""
    ]
  },
  ".": {
    "prefix": ".",
    "body": " =>"
  },
  "sub": {
    "prefix": "sub",
    "body": [
      "sub ${1:function_name} {",
      "\t$0",
      "\\}"
    ]
  },
  "if": {
    "prefix": "if",
    "body": [
      "if ($1) {",
      "\t$0",
      "\\}"
    ]
  },
  "ife": {
    "prefix": "ife",
    "body": [
      "if ($1) {",
      "\t$2",
      "\\}",
      "else {",
      "\t$0",
      "\\}"
    ]
  },
  "ifee": {
    "prefix": "ifee",
    "body": [
      "if ($1) {",
      "\t$2",
      "\\}",
      "elsif ($3) {",
      "\t${4:# elsif...}",
      "\\}",
      "else {",
      "\t$0",
      "\\}"
    ]
  },
  "eif": {
    "prefix": "eif",
    "body": [
      "elsif ($1) {",
      "\t$0",
      "\\}"
    ]
  },
  "xif": {
    "prefix": "xif",
    "body": "$1 if $0;"
  },
  "unless": {
    "prefix": "unless",
    "body": [
      "unless ($1) {",
      "\t$0",
      "\\}"
    ]
  },
  "xunless": {
    "prefix": "xunless",
    "body": "$1 unless $0;"
  },
  "eval": {
    "prefix": "eval",
    "body": [
      "local \\$@;",
      "eval {",
      "\t${1:# do something risky...}",
      "\\};",
      "if (my \\$e = \\$@) {",
      "\t${0:# handle failure...}",
      "\\}"
    ]
  },
  "wh": {
    "prefix": "wh",
    "body": [
      "while ($1) {",
      "\t$0",
      "\\}"
    ]
  },
  "xwh": {
    "prefix": "xwh",
    "body": "$1 while $0;"
  },
  "cfor": {
    "prefix": "cfor",
    "body": [
      "for (my \\$${2:var} = 0; \\$$2 < ${1:count}; \\$$2${3:++}) {",
      "\t$0",
      "\\}"
    ]
  },
  "xfor": {
    "prefix": "xfor",
    "body": "$1 for @$0;"
  },
  "for": {
    "prefix": "for",
    "body": [
      "foreach my \\$${1:x} (@${2:array}) {",
      "\t$0",
      "\\}"
    ]
  },
  "fore": {
    "prefix": "fore",
    "body": "$1 foreach @$0;"
  },
  "moose": {
    "prefix": "moose",
    "body": [
      "use Moose;",
      "use namespace::autoclean;",
      "${1:#}BEGIN {extends '${2:ParentClass}'\\};",
      "",
      "$0"
    ]
  },
  "parent": {
    "prefix": "parent",
    "body": "use parent qw(${0:Parent Class});"
  },
  "slurp": {
    "prefix": "slurp",
    "body": [
      "my \\$${1:var} = do { local \\$/; open my \\$file, '<', \"${2:file}\"; <\\$file> \\};",
      "$0"
    ]
  },
  "strwar": {
    "prefix": "strwar",
    "body": [
      "use strict;",
      "use warnings;"
    ]
  },
  "vers": {
    "prefix": "vers",
    "body": [
      "## no critic",
      "our \\$VERSION = '${0:version}';",
      "eval \\$VERSION;",
      "## use critic"
    ]
  },
  "switch": {
    "prefix": "switch",
    "body": [
      "use feature 'switch';",
      ""
    ]
  },
  "asub": {
    "prefix": "asub",
    "body": [
      "sub {",
      "\t$0",
      "\\}",
      "",
      "",
      ""
    ]
  },
  "begin": {
    "prefix": "begin",
    "body": [
      "BEGIN {",
      "\t$0",
      "\\}",
      ""
    ]
  },
  "pkgmv": {
    "prefix": "pkgmv",
    "body": [
      "__PACKAGE__->${1:package_method}(${0:var})",
      ""
    ]
  },
  "pkgm": {
    "prefix": "pkgm",
    "body": [
      "__PACKAGE__->${0:package_method}()",
      ""
    ]
  },
  "pkget": {
    "prefix": "pkget",
    "body": [
      "__PACKAGE__->get_${0:package_method}()",
      ""
    ]
  },
  "pkgetv": {
    "prefix": "pkgetv",
    "body": [
      "__PACKAGE__->get_${1:package_method}(${0:var})",
      ""
    ]
  },
  "qrx": {
    "prefix": "qrx",
    "body": [
      "qr/",
      "     ${0:regex}",
      "/xms",
      ""
    ]
  },
  "qr/": {
    "prefix": "qr/",
    "body": [
      "qr/${0:regex}/x",
      ""
    ]
  },
  "given": {
    "prefix": "given",
    "body": [
      "given (\\$${1:var}) {",
      "\t${2:# cases}",
      "\t${0:# default}",
      "\\}",
      ""
    ]
  },
  "when": {
    "prefix": "when",
    "body": [
      "when (${1:case}) {",
      "\t$0",
      "\\}",
      ""
    ]
  },
  "hslice": {
    "prefix": "hslice",
    "body": [
      "@{ ${1:hash}  \\}{ ${0:array} \\}",
      "",
      ""
    ]
  },
  "map": {
    "prefix": "map",
    "body": [
      "map {  ${0: body }    \\}  ${1: @array } ;",
      "",
      "",
      ""
    ]
  },
  "ppod": {
    "prefix": "ppod",
    "body": [
      "=head1 NAME",
      "",
      "${1:ClassName} - ${2:ShortDesc}",
      "",
      "=head1 SYNOPSIS",
      "",
      "  use $1;",
      "",
      "  ${3:# synopsis...}",
      "",
      "=head1 DESCRIPTION",
      "",
      "${0:# longer description...}",
      "",
      "",
      "=head1 INTERFACE",
      "",
      "",
      "=head1 DEPENDENCIES",
      "",
      "",
      "=head1 SEE ALSO",
      "",
      ""
    ]
  },
  "psub": {
    "prefix": "psub",
    "body": [
      "=head2 ${1:MethodName}",
      "",
      "${0:Summary....}",
      ""
    ]
  },
  "psubi": {
    "prefix": "psubi",
    "body": [
      "=head2 ${1:MethodName}",
      "",
      "${0:Summary...}",
      "",
      "",
      "=cut"
    ]
  },
  "subpod": {
    "prefix": "subpod",
    "body": [
      "=head2 $1",
      "",
      "Summary of $1",
      "",
      "=cut",
      "",
      "sub ${1:subroutine_name} {",
      "\t$0",
      "\\}"
    ]
  },
  "parg": {
    "prefix": "parg",
    "body": [
      "=over 2",
      "",
      "=item",
      "Arguments",
      "",
      "",
      "=over 3",
      "",
      "=item",
      "C<${1:DataStructure}>",
      "",
      "  ${2:Sample}",
      "",
      "",
      "=back",
      "",
      "",
      "=item",
      "Return",
      "",
      "=over 3",
      "",
      "",
      "=item",
      "C<${0:...return data}>",
      "",
      "",
      "=back",
      "",
      "",
      "=back",
      "",
      "",
      ""
    ]
  },
  "has": {
    "prefix": "has",
    "body": [
      "has ${1:attribute} => (",
      "\tis\t    => '${2:ro|rw}',",
      "\tisa \t=> '${3:Str|Int|HashRef|ArrayRef|etc}',",
      "\tdefault => sub {",
      "\t\t${4:defaultvalue}",
      "\t\\},",
      "\t${0:# other attributes}",
      ");",
      "",
      ""
    ]
  },
  "override": {
    "prefix": "override",
    "body": [
      "override ${1:attribute} => sub {",
      "\t${2:# my \\$self = shift;};",
      "\t${0:# my (\\$self, \\$args) = @_;};",
      "\\};",
      "",
      ""
    ]
  },
  "tuse": {
    "prefix": "tuse",
    "body": [
      "use Test::More;",
      "use Test::Deep; # (); # uncomment to stop prototype errors",
      "use Test::Exception;",
      ""
    ]
  },
  "tlib": {
    "prefix": "tlib",
    "body": [
      "use lib qw{ ./t/lib \\};",
      ""
    ]
  },
  "tmeths": {
    "prefix": "tmeths",
    "body": [
      "\\$ENV{TEST_METHOD\\} = '${0:regex}';",
      ""
    ]
  },
  "trunner": {
    "prefix": "trunner",
    "body": [
      "use ${0:test_class};",
      "$1->runtests();",
      ""
    ]
  },
  "tsub": {
    "prefix": "tsub",
    "body": [
      "sub t${1:number}_${2:test_case} :Test(${3:num_of_tests}) {",
      "\tmy \\$self = shift;",
      "\t$0",
      "",
      "\\}",
      ""
    ]
  },
  "trsub": {
    "prefix": "trsub",
    "body": [
      "test ${1:test_name} => { description => '${2:Description of test.}'\\} => sub {",
      "\tmy (\\$self) = @_;",
      "\t$0",
      "\\};",
      ""
    ]
  },
  "tprep": {
    "prefix": "tprep",
    "body": [
      "sub prep${1:number}_${2:test_case} :Test(startup) {",
      "\tmy \\$self = shift;",
      "\t$0",
      "\\}",
      ""
    ]
  },
  "debug_trace": {
    "prefix": "debug_trace",
    "body": [
      "use Carp; # 'verbose';",
      "# cloak \"die\"",
      "# warn \"warning\"",
      "\\$SIG{'__DIE__'\\} = sub {",
      "\trequire Carp; Carp::confess",
      "\\};",
      ""
    ]
  },
  "dump": {
    "prefix": "dump",
    "body": [
      "use Data::Dump qw(dump);",
      "warn dump ${1:variable}",
      ""
    ]
  },
  "ddp": {
    "prefix": "ddp",
    "body": [
      "use DDP;",
      "p ${1:variable}",
      ""
    ]
  },
  "subtest": {
    "prefix": "subtest",
    "body": [
      "subtest '${1: test_name}' => sub {",
      "\t$2",
      "\\};"
    ]
  }
}
