{
  "forea": {
    "prefix": "forea",
    "body": [
      "foreach ($1) begin",
      "\t$0",
      "end"
    ]
  },
  "dowh": {
    "prefix": "dowh",
    "body": [
      "do begin",
      "\t$0",
      "end while ($1);"
    ]
  },
  "alc": {
    "prefix": "alc",
    "body": [
      "always_comb begin ${1:: statement_label}",
      "\t$0",
      "end $1"
    ]
  },
  "alff": {
    "prefix": "alff",
    "body": [
      "always_ff @(posedge ${1:clk}) begin ${2:: statement_label}",
      "\t$0",
      "end $2"
    ]
  },
  "all": {
    "prefix": "all",
    "body": [
      "always_latch begin ${1:: statement_label}",
      "\t$0",
      "end $1"
    ]
  },
  "cl": {
    "prefix": "cl",
    "body": [
      "class ${1:class_name};",
      "\t// data or class properties",
      "\t$0",
      "",
      "\t// initialization",
      "\tfunction new();",
      "\tendfunction : new",
      "",
      "endclass : $1"
    ]
  },
  "types": {
    "prefix": "types",
    "body": [
      "typedef struct {",
      "\t$0",
      "\\} ${1:name_t};"
    ]
  },
  "prog": {
    "prefix": "prog",
    "body": [
      "program ${1:program_name} ();",
      "\t$0",
      "endprogram : $1"
    ]
  },
  "intf": {
    "prefix": "intf",
    "body": [
      "interface ${1:program_name} ();",
      "\t// nets",
      "\t$0",
      "\t// clocking",
      "",
      "\t// modports",
      "",
      "endinterface : $1"
    ]
  },
  "clock": {
    "prefix": "clock",
    "body": [
      "clocking ${1:clocking_name} @(${2:posedge} ${3:clk});",
      "\t$0",
      "endclocking : $1"
    ]
  },
  "cg": {
    "prefix": "cg",
    "body": [
      "covergroup ${1:group_name} @(${2:posedge} ${3:clk});",
      "\t$0",
      "endgroup : $1"
    ]
  },
  "pkg": {
    "prefix": "pkg",
    "body": [
      "package ${1:package_name};",
      "\t$0",
      "endpackage : $1",
      ""
    ]
  },
  "uvm_object": {
    "prefix": "uvm_object",
    "body": [
      "//  Class: $1",
      "//",
      "class ${1:my_class} extends ${2:uvm_object};",
      "\t`uvm_object_utils($1);",
      "",
      "\t//  Group: Variables",
      "",
      "",
      "\t//  Group: Constraints",
      "",
      "",
      "\t//  Group: Functions",
      "",
      "\t//  Constructor: new",
      "\tfunction new(string name = \"$1\");",
      "\t\tsuper.new(name);",
      "\tendfunction: new",
      "\t$0",
      "endclass: $1",
      "",
      ""
    ]
  },
  "uvm_component": {
    "prefix": "uvm_component",
    "body": [
      "//  Class: $1",
      "//",
      "class ${1:my_class} extends ${2:uvm_component};",
      "\t`uvm_component_utils($1);",
      "",
      "\t//  Group: Configuration Object(s)",
      "",
      "\t//  Var: config_obj",
      "\t${3:config_obj_t} config_obj;",
      "",
      "",
      "\t//  Group: Components",
      "",
      "",
      "\t//  Group: Variables",
      "",
      "",
      "\t//  Group: Functions",
      "",
      "\t//  Constructor: new",
      "\tfunction new(string name = \"$1\", uvm_component parent);",
      "\t\tsuper.new(name, parent);",
      "\tendfunction: new",
      "",
      "\t$0",
      "endclass: $1",
      "",
      ""
    ]
  },
  "uvm_component_extended": {
    "prefix": "uvm_component_extended",
    "body": [
      "//  Class: $1",
      "//",
      "class ${1:my_class} extends ${2:base_class};",
      "\t`uvm_component_utils($1);",
      "",
      "\t//  Group: Configuration Object(s)",
      "",
      "",
      "\t//  Group: Components",
      "",
      "",
      "\t//  Group: Variables",
      "",
      "",
      "\t//  Group: Functions",
      "",
      "\t//  Constructor: new",
      "\tfunction new(string name = \"$1\", uvm_component parent);",
      "\t\tsuper.new(name, parent);",
      "\tendfunction: new",
      "",
      "\t/*---  UVM Build Phases            ---*/",
      "\t/*------------------------------------*/",
      "\t//  Function: build_phase",
      "\textern function void build_phase(uvm_phase phase);",
      "\t//  Function: connect_phase",
      "\textern function void connect_phase(uvm_phase phase);",
      "\t//  Function: end_of_elaboration_phase",
      "\textern function void end_of_elaboration_phase(uvm_phase phase);",
      "",
      "\t/*---  UVM Run Phases              ---*/",
      "\t/*------------------------------------*/",
      "\t//  Function: start_of_simulation_phase",
      "\textern function void start_of_simulation_phase(uvm_phase phase);",
      "\t//  Function: reset_phase",
      "\textern task reset_phase(uvm_phase phase);",
      "\t//  Function: configure_phase",
      "\textern task configure_phase(uvm_phase phase);",
      "\t//  Function: main_phase",
      "\textern task main_phase(uvm_phase phase);",
      "\t//  Function: shutdown_phase",
      "\textern task shutdown_phase(uvm_phase phase);",
      "",
      "\t/*---  UVM Cleanup Phases          ---*/",
      "\t/*------------------------------------*/",
      "\t//  Function: extract_phase",
      "\textern function void extract_phase(uvm_phase phase);",
      "\t//  Function: report_phase",
      "\textern function void report_phase(uvm_phase phase);",
      "\t$0",
      "endclass: $1",
      "",
      "",
      "/*----------------------------------------------------------------------------*/",
      "/*  UVM Build Phases                                                          */",
      "/*----------------------------------------------------------------------------*/",
      "function void $1::build_phase(uvm_phase phase);",
      "\t/*  note: Do not call super.build_phase() from any class that is extended from an UVM base class!  */",
      "\t/*  For more information see UVM Cookbook v1800.2 p.503  */",
      "\t// super.build_phase(phase);",
      "endfunction: build_phase",
      "",
      "",
      "function void $1::connect_phase(uvm_phase phase);",
      "\tsuper.connect_phase(phase);",
      "endfunction: connect_phase",
      "",
      "",
      "function void $1::end_of_elaboration_phase(uvm_phase phase);",
      "\tsuper.end_of_elaboration_phase(phase);",
      "endfunction: end_of_elaboration_phase",
      "",
      "",
      "/*----------------------------------------------------------------------------*/",
      "/*  UVM Run Phases                                                            */",
      "/*----------------------------------------------------------------------------*/",
      "function void $1::start_of_simulation_phase(uvm_phase phase);",
      "\tsuper.start_of_simulation_phase(phase);",
      "endfunction: start_of_simulation_phase",
      "",
      "",
      "task $1::reset_phase(uvm_phase phase);",
      "endtask: reset_phase",
      "",
      "",
      "task $1::configure_phase(uvm_phase phase);",
      "endtask: configure_phase",
      "",
      "",
      "task $1::main_phase(uvm_phase phase);",
      "endtask: main_phase",
      "",
      "",
      "task $1::shutdown_phase(uvm_phase phase);",
      "endtask: shutdown_phase",
      "",
      "",
      "/*----------------------------------------------------------------------------*/",
      "/*  UVM Cleanup Phases                                                        */",
      "/*----------------------------------------------------------------------------*/",
      "function void $1::report_phase(uvm_phase phase);",
      "\tsuper.report_phase(phase);",
      "endfunction: report_phase",
      "",
      "",
      "function void $1::extract_phase(uvm_phase phase);",
      "\tsuper.extract_phase(phase);",
      "endfunction: extract_phase",
      "",
      "",
      ""
    ]
  },
  "uvm_sequence": {
    "prefix": "uvm_sequence",
    "body": [
      "//  Class: $1",
      "//",
      "class ${1:my_class} extends ${2:uvm_sequence};",
      "\t`uvm_object_utils($1);",
      "",
      "\t//  Group: Variables",
      "",
      "",
      "\t//  Group: Constraints",
      "",
      "",
      "\t//  Group: Functions",
      "",
      "\t//  Constructor: new",
      "\tfunction new(string name = \"$1\");",
      "\t\tsuper.new(name);",
      "\tendfunction: new",
      "",
      "\t//  Task: pre_start",
      "\t//  This task is a user-definable callback that is called before the optional ",
      "\t//  execution of <pre_body>.",
      "\t// extern virtual task pre_start();",
      "",
      "\t//  Task: pre_body",
      "\t//  This task is a user-definable callback that is called before the execution ",
      "\t//  of <body> ~only~ when the sequence is started with <start>.",
      "\t//  If <start> is called with ~call_pre_post~ set to 0, ~pre_body~ is not called.",
      "\t// extern virtual task pre_body();",
      "",
      "\t//  Task: pre_do",
      "\t//  This task is a user-definable callback task that is called ~on the parent ",
      "\t//  sequence~, if any. The sequence has issued a wait_for_grant() call and after",
      "\t//  the sequencer has selected this sequence, and before the item is randomized.",
      "\t//",
      "\t//  Although pre_do is a task, consuming simulation cycles may result in unexpected",
      "\t//  behavior on the driver.",
      "\t// extern virtual task pre_do(bit is_item);",
      "",
      "\t//  Function: mid_do",
      "\t//  This function is a user-definable callback function that is called after the ",
      "\t//  sequence item has been randomized, and just before the item is sent to the ",
      "\t//  driver.",
      "\t// extern virtual function void mid_do(uvm_sequence_item this_item);",
      "",
      "\t//  Task: body",
      "\t//  This is the user-defined task where the main sequence code resides.",
      "\textern virtual task body();",
      "",
      "\t//  Function: post_do",
      "\t//  This function is a user-definable callback function that is called after the ",
      "\t//  driver has indicated that it has completed the item, using either this ",
      "\t//  item_done or put methods. ",
      "\t// extern virtual function void post_do(uvm_sequence_item this_item);",
      "",
      "\t//  Task: post_body",
      "\t//  This task is a user-definable callback task that is called after the execution ",
      "\t//  of <body> ~only~ when the sequence is started with <start>.",
      "\t//  If <start> is called with ~call_pre_post~ set to 0, ~post_body~ is not called.",
      "\t// extern virtual task post_body();",
      "",
      "\t//  Task: post_start",
      "\t//  This task is a user-definable callback that is called after the optional ",
      "\t//  execution of <post_body>.",
      "\t// extern virtual task post_start();",
      "\t$0",
      "endclass: $1",
      ""
    ]
  },
  "uvm_sequence_functions": {
    "prefix": "uvm_sequence_functions",
    "body": [
      "// task ${1:my_class::}pre_start();",
      "// endtask: pre_start",
      "",
      "",
      "// task $1pre_body();",
      "// endtask: pre_body",
      "",
      "",
      "// task $1pre_do(bit is_item);",
      "// endtask: pre_do",
      "",
      "",
      "// function void $1mid_do(uvm_sequence_item this_item);",
      "// endfunction: mid_do",
      "",
      "",
      "task $1body();",
      "\t$0",
      "endtask: body",
      "",
      "",
      "// function void $1post_do(uvm_sequence_item this_item);",
      "// endfunction: post_do",
      "",
      "",
      "// task $1post_body();",
      "// endtask: post_body",
      "",
      "",
      "// task $1post_start();",
      "// endtask: post_start",
      "",
      ""
    ]
  },
  "uvm_sequence_item": {
    "prefix": "uvm_sequence_item",
    "body": [
      "//  Class: $1",
      "//",
      "class ${1:my_class} extends ${2:uvm_sequence_item};",
      "\ttypedef $1 this_type_t;",
      "\t`uvm_object_utils($1);",
      "",
      "\t//  Group: Variables",
      "",
      "",
      "\t//  Group: Constraints",
      "",
      "",
      "\t//  Group: Functions",
      "",
      "\t//  Constructor: new",
      "\tfunction new(string name = \"$1\");",
      "\t\tsuper.new(name);",
      "\tendfunction: new",
      "",
      "\t//  Function: do_copy",
      "\t// extern function void do_copy(uvm_object rhs);",
      "\t//  Function: do_compare",
      "\t// extern function bit do_compare(uvm_object rhs, uvm_comparer comparer);",
      "\t//  Function: convert2string",
      "\t// extern function string convert2string();",
      "\t//  Function: do_print",
      "\t// extern function void do_print(uvm_printer printer);",
      "\t//  Function: do_record",
      "\t// extern function void do_record(uvm_recorder recorder);",
      "\t//  Function: do_pack",
      "\t// extern function void do_pack();",
      "\t//  Function: do_unpack",
      "\t// extern function void do_unpack();",
      "\t$0",
      "endclass: $1",
      "",
      "",
      "/*----------------------------------------------------------------------------*/",
      "/*  Constraints                                                               */",
      "/*----------------------------------------------------------------------------*/",
      "",
      "",
      "",
      "",
      "/*----------------------------------------------------------------------------*/",
      "/*  Functions                                                                 */",
      "/*----------------------------------------------------------------------------*/",
      "",
      "",
      ""
    ]
  },
  "uvm_sequence_item_do_copy": {
    "prefix": "uvm_sequence_item_do_copy",
    "body": [
      "function void ${1:my_class}${2:::}do_copy(uvm_object rhs);",
      "\tthis_type_t rhs_;",
      "",
      "\tif (!\\$cast(rhs_, rhs)) begin",
      "\t\t`uvm_error({this.get_name(), \".do_copy()\"\\}, \"Cast failed!\");",
      "\t\treturn;",
      "\tend",
      "\t// `uvm_info({this.get_name(), \".do_copy()\"\\}, \"Cast succeded.\", UVM_HIGH);",
      "",
      "\t/*  chain the copy with parent classes  */",
      "\tsuper.do_copy(rhs);",
      "",
      "\t/*  list of local properties to be copied  */",
      "\t// <this.property_name = rhs_.property_name>;",
      "endfunction: do_copy$0",
      "",
      "",
      ""
    ]
  },
  "uvm_sequence_item_do_compare": {
    "prefix": "uvm_sequence_item_do_compare",
    "body": [
      "function bit ${1:my_class}${2:::}do_compare(uvm_object rhs, uvm_comparer comparer);",
      "\tthis_type_t rhs_;",
      "",
      "\tif (!\\$cast(rhs_, rhs)) begin",
      "\t\t`uvm_error({this.get_name(), \".do_compare()\"\\}, \"Cast failed!\");",
      "\t\treturn;",
      "\tend",
      "\t// `uvm_info({this.get_name(), \".do_compare()\"\\}, \"Cast succeded.\", UVM_HIGH);",
      "",
      "\t/*  chain the compare with parent classes  */",
      "\tdo_compare = super.do_compare(rhs, comparer);",
      "",
      "\t/*  list of local properties to be compared:  */",
      "\tdo_compare &= (",
      "\t\t// <this.property_name == rhs_.property_name> &&",
      "\t\t// <this.property_name == rhs_.property_name>",
      "\t);",
      "endfunction: do_compare$0",
      "",
      "",
      ""
    ]
  },
  "uvm_sequence_item_convert2string": {
    "prefix": "uvm_sequence_item_convert2string",
    "body": [
      "function string ${1:my_class}${2:::}convert2string();",
      "\tstring s;",
      "",
      "\t/*  chain the convert2string with parent classes  */",
      "\ts = super.convert2string();",
      "",
      "\t/*  list of local properties to be printed:  */",
      "\t//  guide             0---4---8--12--16--20--24--28--32--36--40--44--48--",
      "\t// s = {s, \\$sformatf(\"property_label      : 0x%0hn\", property_name)\\};",
      "\t// s = {s, \\$sformatf(\"property_label      :   %0dn\", property_name)\\};",
      "",
      "\treturn s;",
      "endfunction: convert2string$0",
      "",
      "",
      ""
    ]
  },
  "uvm_sequence_item_do_print": {
    "prefix": "uvm_sequence_item_do_print",
    "body": [
      "function void ${1:my_class}${2:::}do_print(uvm_printer printer)",
      "\t/*  chain the print with parent classes  */",
      "\tsuper.do_print(printer);",
      "",
      "\t/*  list of local properties to be printed:  */",
      "\t// printer.print_string(\"property_label\", property_name);",
      "\t// printer.print_field_int(\"property_label\", property_name, \\$bits(property_name), UVM_HEX);",
      "endfunction: do_print$0",
      ""
    ]
  },
  "uvm_sequence_item_do_record": {
    "prefix": "uvm_sequence_item_do_record",
    "body": [
      "function void ${1:my_class}${2:::}do_record(uvm_recorder recorder);",
      "\t/*  chain the record with parent classes  */",
      "\tsuper.do_record(recorder);",
      "",
      "\t/*  list of local properties to be recorded:  */",
      "\t/*  note: use uvm_record_int, uvm_record_string, uvm_record_time, uvm_record_real for known basic types.  */",
      "\t// `uvm_record_string(\"property_label\", property_name);",
      "\t// `uvm_record_int(\"property_label\", property_name, \\$bits(property_name), UVM_HEX);",
      "endfunction: do_record$0",
      ""
    ]
  },
  "uvm_sequence_item_do_pack": {
    "prefix": "uvm_sequence_item_do_pack",
    "body": [
      "function void ${1:my_class}${2:::}do_pack(uvm_packer packer);",
      "\t/*  chain the pack with parent classes  */",
      "\tsuper.do_pack(packer);",
      "",
      "\t/*  list of local properties to be packed:  */",
      "\t//  note: look up the appropriate macro(s) for your properties!",
      "\t// `uvm_pack_int(property_name);",
      "\t// `uvm_pack_queue(property_name);",
      "\t// `uvm_pack_string(property_name);",
      "endfunction: do_pack$0",
      ""
    ]
  },
  "uvm_sequence_item_do_unpack": {
    "prefix": "uvm_sequence_item_do_unpack",
    "body": [
      "function void ${1:my_class}${2:::}do_unpack(uvm_packer packer);",
      "\t/*  chain the unpack with parent classes  */",
      "\tsuper.do_unpack(packer);",
      "",
      "\t/*  list of local properties to be unpacked:  */",
      "\t//  note: look up the appropriate macro(s) for your properties!",
      "\t// `uvm_unpack_int(property_name);",
      "\t// `uvm_unpack_queue(property_name);",
      "\t// `uvm_unpack_string(property_name);",
      "endfunction: do_unpack$0",
      ""
    ]
  }
}
