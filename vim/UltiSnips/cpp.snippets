snippet ifndef "Expand ifdef" !b
#ifndef $1
#define $1
	$2
#endif
endsnippet

snippet testinit "Boost test init test module" b
///Flag to use BOOST_TEST dynamic library, not just the include library.
#define BOOST_TEST_DYN_LINK
/// Module subsitutes the main C++ function, only one module per project.
#define BOOST_TEST_MODULE $1_module
endsnippet

snippet testinclude "Boost test include: unit_test.hpp" b
#include <boost/test/unit_test.hpp>
endsnippet

snippet testsuite "Boost test suite" b
BOOST_AUTO_TEST_SUITE($1)
	$2
BOOST_AUTO_TEST_SUITE_END()
endsnippet

snippet testcase "Boost test case" b
BOOST_AUTO_TEST_CASE($1)
{
	$2
}
endsnippet

snippet bc "BOOST_CHECK" b
BOOST_CHECK(${1:comparisson});
endsnippet
snippet bcm "BOOST_CHECK_MESSAGE" b
BOOST_CHECK_MESSAGE(${1:comparisson},
	"${2:message}");
endsnippet
snippet bw "BOOST_WARN" b
BOOST_WARN(${1:comparisson});
endsnippet
snippet br "BOOST_REQUIRE" b
BOOST_REQUIRE(${1:comparisson});
endsnippet
snippet bceq "BOOST_CHECK_EQUAL" b
BOOST_CHECK_EQUAL($1,$2);
endsnippet
snippet bcgt "BOOST_CHECK_GT" b
BOOST_CHECK_GT($1,$2);
endsnippet
snippet bclt "BOOST_CHECK_LT" b
BOOST_CHECK_LT($1,$2);
endsnippet

snippet vtk6 "VTK6 compatibility defines" b
#define vtkRenderingCore_AUTOINIT 4(vtkInteractionStyle,vtkRenderingFreeType, \
vtkRenderingFreeTypeOpenGL,vtkRenderingOpenGL)
#define vtkRenderingVolume_AUTOINIT 1(vtkRenderingVolumeOpenGL)
endsnippet

snippet setget "set and get function in .h" b
void Set${1:CamelName}(${2:type} ${1/(^[A-Z])|([A-Z]+)/(?1:\l$0)(?2:_\l$0)/g}){ ${1/(^[A-Z])|([A-Z]+)/(?1:\l$0)(?2:_\l$0)/g}_ = ${1/(^[A-Z])|([A-Z]+)/(?1:\l$0)(?2:_\l$0)/g};};
$2 Get$1(){ return ${1/(^[A-Z])|([A-Z]+)/(?1:\l$0)(?2:_\l$0)/g}_;};
endsnippet


# Casts
snippet cast "Static Cast"
std::static_cast<${1}>(${2})${0}
endsnippet
snippet cast "Reinterpret Cast"
std::reinterpret_cast<${1}>(${2})${0}
endsnippet
snippet cast "Dynamic Cast"
std::dynamic_cast<${1}>(${2})${0}
endsnippet
snippet cast "Const Cast"
std::const_cast<${1}>(${2})${0}
endsnippet

# Google Mock
snippet ass "ASSERT_THAT" b
ASSERT_THAT($1,$2);
endsnippet

snippet TEST_F "TEST_F" b
TEST_F(${1:FixtureClass}, ${2:TestName}) {
	$3
}
endsnippet
